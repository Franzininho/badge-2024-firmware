
tstcracha.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
void InterruptVector()         __attribute__((naked)) __attribute((section(".init"))) __attribute((weak,alias("InterruptVectorDefault")));
void InterruptVectorDefault()  __attribute__((naked)) __attribute((section(".init")));

void InterruptVectorDefault()
{
	asm volatile( "\n\
   0:	4b40006f          	j	4b4 <handle_reset>
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0532                	slli	a0,a0,0xc
   a:	0000                	unimp
   c:	0530                	addi	a2,sp,648
	...
  2e:	0000                	unimp
  30:	0530                	addi	a2,sp,648
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0530                	addi	a2,sp,648
  3a:	0000                	unimp
  3c:	0000                	unimp
  3e:	0000                	unimp
  40:	0530                	addi	a2,sp,648
  42:	0000                	unimp
  44:	0530                	addi	a2,sp,648
  46:	0000                	unimp
  48:	0530                	addi	a2,sp,648
  4a:	0000                	unimp
  4c:	0530                	addi	a2,sp,648
  4e:	0000                	unimp
  50:	0530                	addi	a2,sp,648
  52:	0000                	unimp
  54:	0530                	addi	a2,sp,648
  56:	0000                	unimp
  58:	0530                	addi	a2,sp,648
  5a:	0000                	unimp
  5c:	0530                	addi	a2,sp,648
  5e:	0000                	unimp
  60:	0530                	addi	a2,sp,648
  62:	0000                	unimp
  64:	0530                	addi	a2,sp,648
  66:	0000                	unimp
  68:	0530                	addi	a2,sp,648
  6a:	0000                	unimp
  6c:	0530                	addi	a2,sp,648
  6e:	0000                	unimp
  70:	0530                	addi	a2,sp,648
  72:	0000                	unimp
  74:	0530                	addi	a2,sp,648
  76:	0000                	unimp
  78:	0530                	addi	a2,sp,648
  7a:	0000                	unimp
  7c:	0530                	addi	a2,sp,648
  7e:	0000                	unimp
  80:	0530                	addi	a2,sp,648
  82:	0000                	unimp
  84:	0530                	addi	a2,sp,648
  86:	0000                	unimp
  88:	0530                	addi	a2,sp,648
  8a:	0000                	unimp
  8c:	0530                	addi	a2,sp,648
  8e:	0000                	unimp
  90:	0530                	addi	a2,sp,648
  92:	0000                	unimp
  94:	0530                	addi	a2,sp,648
  96:	0000                	unimp
  98:	0530                	addi	a2,sp,648
  9a:	0000                	unimp
  9c:	0000                	unimp
	...

Disassembly of section .text:

000000a0 <__divsi3>:
      a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
      a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
      a8:	862e                	mv	a2,a1
      aa:	85aa                	mv	a1,a0
      ac:	557d                	li	a0,-1
      ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
      b0:	4685                	li	a3,1
      b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
      b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
      ba:	0606                	slli	a2,a2,0x1
      bc:	0686                	slli	a3,a3,0x1
      be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
      c2:	4501                	li	a0,0
      c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
      c8:	8d91                	sub	a1,a1,a2
      ca:	8d55                	or	a0,a0,a3
      cc:	8285                	srli	a3,a3,0x1
      ce:	8205                	srli	a2,a2,0x1
      d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
      d2:	8082                	ret

000000d4 <__umodsi3>:
      d4:	8286                	mv	t0,ra
      d6:	3fc9                	jal	a8 <__hidden___udivsi3>
      d8:	852e                	mv	a0,a1
      da:	8282                	jr	t0
      dc:	40a00533          	neg	a0,a0
      e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
      e4:	40b005b3          	neg	a1,a1
      e8:	b7c1                	j	a8 <__hidden___udivsi3>
      ea:	40b005b3          	neg	a1,a1
      ee:	8286                	mv	t0,ra
      f0:	3f65                	jal	a8 <__hidden___udivsi3>
      f2:	40a00533          	neg	a0,a0
      f6:	8282                	jr	t0

000000f8 <__modsi3>:
      f8:	8286                	mv	t0,ra
      fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
      fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
     102:	375d                	jal	a8 <__hidden___udivsi3>
     104:	852e                	mv	a0,a1
     106:	8282                	jr	t0
     108:	40b005b3          	neg	a1,a1
     10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
     110:	40a00533          	neg	a0,a0
     114:	3f51                	jal	a8 <__hidden___udivsi3>
     116:	40b00533          	neg	a0,a1
     11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
{
     11e:	1131                	addi	sp,sp,-20
     120:	c426                	sw	s1,8(sp)
     122:	c806                	sw	ra,16(sp)
     124:	c622                	sw	s0,12(sp)
     126:	84ae                	mv	s1,a1
     128:	87aa                	mv	a5,a0
     12a:	85b2                	mv	a1,a2
	int overflow = 0;
     12c:	4301                	li	t1,0
	if(pad_to == 0) pad_to = len;
     12e:	caad                	beqz	a3,1a0 <mini_pad+0x82>
	if(len > pad_to) {
     130:	0096d463          	bge	a3,s1,138 <mini_pad+0x1a>
     134:	84b6                	mv	s1,a3
		overflow = 1;
     136:	4305                	li	t1,1
	for(i = pad_to - len; i > 0; i --) {
     138:	40968433          	sub	s0,a3,s1
		*(pbuffer++) = pad_char;
     13c:	00045363          	bgez	s0,142 <mini_pad+0x24>
     140:	4401                	li	s0,0
     142:	8622                	mv	a2,s0
     144:	853a                	mv	a0,a4
     146:	c23e                	sw	a5,4(sp)
     148:	c01a                	sw	t1,0(sp)
     14a:	2735                	jal	876 <memset>
     14c:	4302                	lw	t1,0(sp)
     14e:	4792                	lw	a5,4(sp)
     150:	872a                	mv	a4,a0
     152:	008506b3          	add	a3,a0,s0
     156:	4601                	li	a2,0
	for(i = len; i > 0; i --) {
     158:	40c485b3          	sub	a1,s1,a2
     15c:	04b04463          	bgtz	a1,1a4 <mini_pad+0x86>
     160:	0004d363          	bgez	s1,166 <mini_pad+0x48>
     164:	4481                	li	s1,0
     166:	00968633          	add	a2,a3,s1
	len = pbuffer - buffer;
     16a:	40e60533          	sub	a0,a2,a4
	if(overflow) {
     16e:	02030463          	beqz	t1,196 <mini_pad+0x78>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     172:	02c77263          	bgeu	a4,a2,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     176:	02a00793          	li	a5,42
     17a:	fef60fa3          	sb	a5,-1(a2)
     17e:	fff60693          	addi	a3,a2,-1
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     182:	00d77a63          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     186:	fef60f23          	sb	a5,-2(a2)
     18a:	ffe60693          	addi	a3,a2,-2
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
     18e:	00d77463          	bgeu	a4,a3,196 <mini_pad+0x78>
			*(pbuffer-- - 1) = '*';
     192:	fef60ea3          	sb	a5,-3(a2)
}
     196:	40c2                	lw	ra,16(sp)
     198:	4432                	lw	s0,12(sp)
     19a:	44a2                	lw	s1,8(sp)
     19c:	0151                	addi	sp,sp,20
     19e:	8082                	ret
	if(pad_to == 0) pad_to = len;
     1a0:	86a6                	mv	a3,s1
     1a2:	bf59                	j	138 <mini_pad+0x1a>
		*(pbuffer++) = *(ptr++);
     1a4:	00c785b3          	add	a1,a5,a2
     1a8:	0005c503          	lbu	a0,0(a1)
     1ac:	00c685b3          	add	a1,a3,a2
     1b0:	0605                	addi	a2,a2,1
     1b2:	00a58023          	sb	a0,0(a1)
	for(i = len; i > 0; i --) {
     1b6:	b74d                	j	158 <mini_pad+0x3a>

000001b8 <DelaySysTick>:
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
     1b8:	e000f7b7          	lui	a5,0xe000f
     1bc:	479c                	lw	a5,8(a5)
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     1be:	e000f737          	lui	a4,0xe000f
	uint32_t targend = SysTick->CNT + n;
     1c2:	953e                	add	a0,a0,a5
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
     1c4:	471c                	lw	a5,8(a4)
     1c6:	8f89                	sub	a5,a5,a0
     1c8:	fe07cee3          	bltz	a5,1c4 <DelaySysTick+0xc>
	uint32_t targend = SysTick->CNTL + n;
	while( ((int32_t)( SysTick->CNTL - targend )) < 0 );
#else
	#error DelaySysTick not defined.
#endif
}
     1cc:	8082                	ret

000001ce <mini_itoa.part.0>:
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     1ce:	1101                	addi	sp,sp,-32
     1d0:	ce06                	sw	ra,28(sp)
     1d2:	cc22                	sw	s0,24(sp)
     1d4:	ca26                	sw	s1,20(sp)
	int	negative = 0;
     1d6:	c002                	sw	zero,0(sp)
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
     1d8:	832a                	mv	t1,a0
	if (value < 0 && !unsig) {
     1da:	00055763          	bgez	a0,1e8 <mini_itoa.part.0+0x1a>
     1de:	e689                	bnez	a3,1e8 <mini_itoa.part.0+0x1a>
		negative = 1;
     1e0:	4785                	li	a5,1
		value = -value;
     1e2:	40a00333          	neg	t1,a0
		negative = 1;
     1e6:	c03e                	sw	a5,0(sp)
     1e8:	06100413          	li	s0,97
     1ec:	c219                	beqz	a2,1f2 <mini_itoa.part.0+0x24>
     1ee:	04100413          	li	s0,65
	int	negative = 0;
     1f2:	84ba                	mv	s1,a4
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     1f4:	1459                	addi	s0,s0,-10
		int digit = value % radix;
     1f6:	851a                	mv	a0,t1
     1f8:	c83a                	sw	a4,16(sp)
     1fa:	c21a                	sw	t1,4(sp)
     1fc:	c62e                	sw	a1,12(sp)
     1fe:	c41a                	sw	t1,8(sp)
     200:	3dd1                	jal	d4 <__umodsi3>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     202:	47a5                	li	a5,9
     204:	4322                	lw	t1,8(sp)
     206:	45b2                	lw	a1,12(sp)
     208:	4742                	lw	a4,16(sp)
     20a:	0ff57693          	andi	a3,a0,255
     20e:	06a7e163          	bltu	a5,a0,270 <mini_itoa.part.0+0xa2>
     212:	03068693          	addi	a3,a3,48
     216:	0ff6f693          	andi	a3,a3,255
     21a:	00148793          	addi	a5,s1,1
     21e:	00d48023          	sb	a3,0(s1)
		value /= radix;
     222:	851a                	mv	a0,t1
     224:	c83a                	sw	a4,16(sp)
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     226:	c63e                	sw	a5,12(sp)
		value /= radix;
     228:	c42e                	sw	a1,8(sp)
     22a:	3dbd                	jal	a8 <__hidden___udivsi3>
	} while (value > 0);
     22c:	4692                	lw	a3,4(sp)
     22e:	45a2                	lw	a1,8(sp)
     230:	47b2                	lw	a5,12(sp)
     232:	4742                	lw	a4,16(sp)
		value /= radix;
     234:	832a                	mv	t1,a0
	} while (value > 0);
     236:	02b6fb63          	bgeu	a3,a1,26c <mini_itoa.part.0+0x9e>
	if (negative)
     23a:	4682                	lw	a3,0(sp)
     23c:	c699                	beqz	a3,24a <mini_itoa.part.0+0x7c>
		*(pbuffer++) = '-';
     23e:	02d00693          	li	a3,45
     242:	00d78023          	sb	a3,0(a5) # e000f000 <__global_pointer$+0xc000e800>
     246:	00248793          	addi	a5,s1,2
	len = (pbuffer - buffer);
     24a:	40e78533          	sub	a0,a5,a4
	for (i = 0; i < len / 2; i++) {
     24e:	01f55693          	srli	a3,a0,0x1f
     252:	96aa                	add	a3,a3,a0
	*(pbuffer) = '\0';
     254:	00078023          	sb	zero,0(a5)
	for (i = 0; i < len / 2; i++) {
     258:	8685                	srai	a3,a3,0x1
     25a:	4601                	li	a2,0
     25c:	17fd                	addi	a5,a5,-1
     25e:	00d64b63          	blt	a2,a3,274 <mini_itoa.part.0+0xa6>
}
     262:	40f2                	lw	ra,28(sp)
     264:	4462                	lw	s0,24(sp)
     266:	44d2                	lw	s1,20(sp)
     268:	6105                	addi	sp,sp,32
     26a:	8082                	ret
	} while (value > 0);
     26c:	84be                	mv	s1,a5
     26e:	b761                	j	1f6 <mini_itoa.part.0+0x28>
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
     270:	96a2                	add	a3,a3,s0
     272:	b755                	j	216 <mini_itoa.part.0+0x48>
		char j = buffer[i];
     274:	00c705b3          	add	a1,a4,a2
		buffer[i] = buffer[len-i-1];
     278:	0007c283          	lbu	t0,0(a5)
		char j = buffer[i];
     27c:	0005c303          	lbu	t1,0(a1)
	for (i = 0; i < len / 2; i++) {
     280:	0605                	addi	a2,a2,1
		buffer[i] = buffer[len-i-1];
     282:	00558023          	sb	t0,0(a1)
		buffer[len-i-1] = j;
     286:	00678023          	sb	t1,0(a5)
	for (i = 0; i < len / 2; i++) {
     28a:	bfc9                	j	25c <mini_itoa.part.0+0x8e>

0000028c <ssd1306_i2c_setup>:
void ssd1306_i2c_setup(void)
{
	uint16_t tempreg;
	
	// Reset I2C1 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     28c:	400217b7          	lui	a5,0x40021
     290:	4b98                	lw	a4,16(a5)
     292:	002006b7          	lui	a3,0x200
     296:	8f55                	or	a4,a4,a3
     298:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     29a:	4b98                	lw	a4,16(a5)
     29c:	ffe006b7          	lui	a3,0xffe00
     2a0:	16fd                	addi	a3,a3,-1
     2a2:	8f75                	and	a4,a4,a3
     2a4:	cb98                	sw	a4,16(a5)
	
	// set freq
	tempreg = I2C1->CTLR2;
     2a6:	40005737          	lui	a4,0x40005
     2aa:	40475783          	lhu	a5,1028(a4) # 40005404 <__global_pointer$+0x20004c04>
     2ae:	07c2                	slli	a5,a5,0x10
     2b0:	83c1                	srli	a5,a5,0x10
	tempreg &= ~I2C_CTLR2_FREQ;
     2b2:	fc07f793          	andi	a5,a5,-64
	tempreg |= (FUNCONF_SYSTEM_CORE_CLOCK/SSD1306_I2C_PRERATE)&I2C_CTLR2_FREQ;
     2b6:	0187e793          	ori	a5,a5,24
	I2C1->CTLR2 = tempreg;
     2ba:	40f71223          	sh	a5,1028(a4)
	tempreg = (FUNCONF_SYSTEM_CORE_CLOCK/(25*SSD1306_I2C_CLKRATE))&I2C_CKCFGR_CCR;
	tempreg |= I2C_CKCFGR_DUTY;
#endif
	tempreg |= I2C_CKCFGR_FS;
#endif
	I2C1->CKCFGR = tempreg;
     2be:	77f1                	lui	a5,0xffffc
     2c0:	0785                	addi	a5,a5,1
     2c2:	40f71e23          	sh	a5,1052(a4)
	// initialize the state
	ssd1306_i2c_irq_state = 0;
#endif
	
	// Enable I2C
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     2c6:	40075783          	lhu	a5,1024(a4)
     2ca:	07c2                	slli	a5,a5,0x10
     2cc:	83c1                	srli	a5,a5,0x10
     2ce:	0017e793          	ori	a5,a5,1
     2d2:	40f71023          	sh	a5,1024(a4)

	// set ACK mode
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
     2d6:	40075783          	lhu	a5,1024(a4)
     2da:	07c2                	slli	a5,a5,0x10
     2dc:	83c1                	srli	a5,a5,0x10
     2de:	4007e793          	ori	a5,a5,1024
     2e2:	40f71023          	sh	a5,1024(a4)
}
     2e6:	8082                	ret

000002e8 <ssd1306_drawPixel>:
void ssd1306_drawPixel(uint8_t x, uint8_t y, uint8_t color)
{
	uint16_t addr;
	
	/* clip */
	if(x >= SSD1306_W)
     2e8:	01851793          	slli	a5,a0,0x18
     2ec:	87e1                	srai	a5,a5,0x18
     2ee:	0207cb63          	bltz	a5,324 <ssd1306_drawPixel+0x3c>
		return;
	if(y >= SSD1306_H)
     2f2:	03f00793          	li	a5,63
     2f6:	02b7e763          	bltu	a5,a1,324 <ssd1306_drawPixel+0x3c>
		return;
	
	/* compute buffer address */
	addr = x + SSD1306_W*(y/8);
     2fa:	0035d793          	srli	a5,a1,0x3
     2fe:	079e                	slli	a5,a5,0x7
	
	/* set/clear bit in buffer */
	if(color)
		ssd1306_buffer[addr] |= (1<<(y&7));
     300:	97aa                	add	a5,a5,a0
     302:	20000537          	lui	a0,0x20000
     306:	00050513          	mv	a0,a0
     30a:	953e                	add	a0,a0,a5
     30c:	899d                	andi	a1,a1,7
     30e:	4785                	li	a5,1
     310:	00b797b3          	sll	a5,a5,a1
     314:	07e2                	slli	a5,a5,0x18
     316:	00050703          	lb	a4,0(a0) # 20000000 <ssd1306_buffer>
     31a:	87e1                	srai	a5,a5,0x18
	if(color)
     31c:	c609                	beqz	a2,326 <ssd1306_drawPixel+0x3e>
		ssd1306_buffer[addr] |= (1<<(y&7));
     31e:	8fd9                	or	a5,a5,a4
	else
		ssd1306_buffer[addr] &= ~(1<<(y&7));
     320:	00f50023          	sb	a5,0(a0)
}
     324:	8082                	ret
		ssd1306_buffer[addr] &= ~(1<<(y&7));
     326:	fff7c793          	not	a5,a5
     32a:	8ff9                	and	a5,a5,a4
     32c:	bfd5                	j	320 <ssd1306_drawPixel+0x38>

0000032e <ssd1306_drawstr.constprop.0>:
}

/*
 * draw a string to the display
 */
void ssd1306_drawstr(uint8_t x, uint8_t y, char *str, uint8_t color)
     32e:	fdc10113          	addi	sp,sp,-36
     332:	ce22                	sw	s0,28(sp)
     334:	d006                	sw	ra,32(sp)
     336:	cc26                	sw	s1,24(sp)
     338:	842a                	mv	s0,a0
     33a:	c02e                	sw	a1,0(sp)
     33c:	87b2                	mv	a5,a2
		d = fontdata[(chr<<3)+i];
     33e:	6285                	lui	t0,0x1
{
	uint8_t c;
	
	while((c=*str++))
     340:	0007c303          	lbu	t1,0(a5) # ffffc000 <__global_pointer$+0xdfffb800>
     344:	0785                	addi	a5,a5,1
     346:	06030963          	beqz	t1,3b8 <ssd1306_drawstr.constprop.0+0x8a>
		d = fontdata[(chr<<3)+i];
     34a:	030e                	slli	t1,t1,0x3
     34c:	4701                	li	a4,0
     34e:	dec28393          	addi	t2,t0,-532 # dec <fontdata>
			ssd1306_drawPixel(x+j, y+i, col);
     352:	4602                	lw	a2,0(sp)
		d = fontdata[(chr<<3)+i];
     354:	00e306b3          	add	a3,t1,a4
     358:	969e                	add	a3,a3,t2
     35a:	0006c683          	lbu	a3,0(a3) # ffe00000 <__global_pointer$+0xdfdff800>
			ssd1306_drawPixel(x+j, y+i, col);
     35e:	00e605b3          	add	a1,a2,a4
		for(j=0;j<8;j++)
     362:	4481                	li	s1,0
			ssd1306_drawPixel(x+j, y+i, col);
     364:	0ff5f593          	andi	a1,a1,255
     368:	00940533          	add	a0,s0,s1
     36c:	0076d613          	srli	a2,a3,0x7
     370:	0ff57513          	andi	a0,a0,255
     374:	ca3e                	sw	a5,20(sp)
     376:	c83a                	sw	a4,16(sp)
     378:	c61a                	sw	t1,12(sp)
     37a:	c436                	sw	a3,8(sp)
     37c:	c22e                	sw	a1,4(sp)
     37e:	37ad                	jal	2e8 <ssd1306_drawPixel>
			d <<= 1;
     380:	46a2                	lw	a3,8(sp)
		for(j=0;j<8;j++)
     382:	0485                	addi	s1,s1,1
     384:	04c2                	slli	s1,s1,0x10
     386:	6505                	lui	a0,0x1
			d <<= 1;
     388:	0686                	slli	a3,a3,0x1
		for(j=0;j<8;j++)
     38a:	80c1                	srli	s1,s1,0x10
     38c:	4621                	li	a2,8
     38e:	4592                	lw	a1,4(sp)
     390:	4332                	lw	t1,12(sp)
     392:	4742                	lw	a4,16(sp)
     394:	47d2                	lw	a5,20(sp)
			d <<= 1;
     396:	0ff6f693          	andi	a3,a3,255
		for(j=0;j<8;j++)
     39a:	dec50393          	addi	t2,a0,-532 # dec <fontdata>
     39e:	82aa                	mv	t0,a0
     3a0:	fcc494e3          	bne	s1,a2,368 <ssd1306_drawstr.constprop.0+0x3a>
	for(i=0;i<8;i++)
     3a4:	0705                	addi	a4,a4,1
     3a6:	fa9716e3          	bne	a4,s1,352 <ssd1306_drawstr.constprop.0+0x24>
	{
		ssd1306_drawchar(x, y, c, color);
		x += 8;
     3aa:	0421                	addi	s0,s0,8
     3ac:	0ff47413          	andi	s0,s0,255
		if(x>120)
     3b0:	07800713          	li	a4,120
     3b4:	f88776e3          	bgeu	a4,s0,340 <ssd1306_drawstr.constprop.0+0x12>
			break;
	}
}
     3b8:	5082                	lw	ra,32(sp)
     3ba:	4472                	lw	s0,28(sp)
     3bc:	44e2                	lw	s1,24(sp)
     3be:	02410113          	addi	sp,sp,36
     3c2:	8082                	ret

000003c4 <internal_handle_input.constprop.0>:
	uint32_t dmd0 = *dmdata0;
     3c4:	e00007b7          	lui	a5,0xe0000
     3c8:	0f47a783          	lw	a5,244(a5) # e00000f4 <__global_pointer$+0xbffff8f4>
}
     3cc:	8082                	ret

000003ce <_write.constprop.0>:
int _write(int fd, const char *buf, int size)
     3ce:	1111                	addi	sp,sp,-28
     3d0:	ca22                	sw	s0,20(sp)
     3d2:	cc06                	sw	ra,24(sp)
     3d4:	c826                	sw	s1,16(sp)
     3d6:	c02a                	sw	a0,0(sp)
	char buffer[4] = { 0 };
     3d8:	c602                	sw	zero,12(sp)
int _write(int fd, const char *buf, int size)
     3da:	842e                	mv	s0,a1
	if( size == 0 )
     3dc:	e1e1                	bnez	a1,49c <_write.constprop.0+0xce>
		lastdmd = (*DMDATA0);
     3de:	e00007b7          	lui	a5,0xe0000
     3e2:	0f47a783          	lw	a5,244(a5) # e00000f4 <__global_pointer$+0xbffff8f4>
		if( lastdmd && !(lastdmd&0x80) ) internal_handle_input( (uint32_t*)DMDATA0 );
     3e6:	c789                	beqz	a5,3f0 <_write.constprop.0+0x22>
     3e8:	0807f793          	andi	a5,a5,128
     3ec:	e391                	bnez	a5,3f0 <_write.constprop.0+0x22>
     3ee:	3fd9                	jal	3c4 <internal_handle_input.constprop.0>
	if( size == 0 )
     3f0:	84a2                	mv	s1,s0
     3f2:	a879                	j	490 <_write.constprop.0+0xc2>
		int tosend = size - place;
     3f4:	409405b3          	sub	a1,s0,s1
     3f8:	469d                	li	a3,7
     3fa:	872e                	mv	a4,a1
     3fc:	00b6d363          	bge	a3,a1,402 <_write.constprop.0+0x34>
     400:	471d                	li	a4,7
     402:	000276b7          	lui	a3,0x27
     406:	10168693          	addi	a3,a3,257 # 27101 <tstcracha.c.b3ef1d14+0x24bc1>
		while( ( lastdmd = (*DMDATA0) ) & 0x80 )
     40a:	e0000337          	lui	t1,0xe0000
     40e:	0f432603          	lw	a2,244(t1) # e00000f4 <__global_pointer$+0xbffff8f4>
     412:	08067513          	andi	a0,a2,128
     416:	e93d                	bnez	a0,48c <_write.constprop.0+0xbe>
		if( lastdmd ) internal_handle_input( (uint32_t*)DMDATA0 );
     418:	c611                	beqz	a2,424 <_write.constprop.0+0x56>
     41a:	c43a                	sw	a4,8(sp)
     41c:	c22e                	sw	a1,4(sp)
     41e:	375d                	jal	3c4 <internal_handle_input.constprop.0>
     420:	4722                	lw	a4,8(sp)
     422:	4592                	lw	a1,4(sp)
			buffer[t-3] = buf[t+place];
     424:	4689                	li	a3,2
     426:	4601                	li	a2,0
     428:	00b6d463          	bge	a3,a1,430 <_write.constprop.0+0x62>
     42c:	ffd70613          	addi	a2,a4,-3
     430:	4782                	lw	a5,0(sp)
     432:	00348593          	addi	a1,s1,3
     436:	0068                	addi	a0,sp,12
     438:	95be                	add	a1,a1,a5
     43a:	c23a                	sw	a4,4(sp)
     43c:	21b1                	jal	888 <memcpy>
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     43e:	4632                	lw	a2,12(sp)
     440:	4782                	lw	a5,0(sp)
		while( t < tosend && t < 3 )
     442:	4712                	lw	a4,4(sp)
		*DMDATA1 = *(uint32_t*)&(buffer[0]);
     444:	e00006b7          	lui	a3,0xe0000
     448:	0ec6ac23          	sw	a2,248(a3) # e00000f8 <__global_pointer$+0xbffff8f8>
		while( t < tosend && t < 3 )
     44c:	458d                	li	a1,3
     44e:	00978633          	add	a2,a5,s1
		t = 0;
     452:	4681                	li	a3,0
			buffer[t+1] = buf[t+place];
     454:	00064303          	lbu	t1,0(a2)
     458:	0685                	addi	a3,a3,1
     45a:	007c                	addi	a5,sp,12
     45c:	00d78533          	add	a0,a5,a3
     460:	00650023          	sb	t1,0(a0)
		while( t < tosend && t < 3 )
     464:	00d70563          	beq	a4,a3,46e <_write.constprop.0+0xa0>
     468:	0605                	addi	a2,a2,1
     46a:	feb695e3          	bne	a3,a1,454 <_write.constprop.0+0x86>
		buffer[0] = 0x80 | (tosend + 4);
     46e:	00470693          	addi	a3,a4,4
     472:	f806e693          	ori	a3,a3,-128
     476:	00d10623          	sb	a3,12(sp)
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     47a:	4632                	lw	a2,12(sp)
     47c:	e00006b7          	lui	a3,0xe0000
		place += tosend;
     480:	94ba                	add	s1,s1,a4
		*DMDATA0 = *(uint32_t*)&(buffer[0]);
     482:	0ec6aa23          	sw	a2,244(a3) # e00000f4 <__global_pointer$+0xbffff8f4>
	while( place < size )
     486:	f684c7e3          	blt	s1,s0,3f4 <_write.constprop.0+0x26>
     48a:	b79d                	j	3f0 <_write.constprop.0+0x22>
			if( timeout-- == 0 ) return place;
     48c:	16fd                	addi	a3,a3,-1
     48e:	f2c1                	bnez	a3,40e <_write.constprop.0+0x40>
}
     490:	40e2                	lw	ra,24(sp)
     492:	4452                	lw	s0,20(sp)
     494:	8526                	mv	a0,s1
     496:	44c2                	lw	s1,16(sp)
     498:	0171                	addi	sp,sp,28
     49a:	8082                	ret
	if( size == 0 )
     49c:	4481                	li	s1,0
     49e:	b7e5                	j	486 <_write.constprop.0+0xb8>

000004a0 <__puts_uart>:
{
     4a0:	1151                	addi	sp,sp,-12
     4a2:	c222                	sw	s0,4(sp)
     4a4:	c406                	sw	ra,8(sp)
     4a6:	842e                	mv	s0,a1
	_write( 0, s, len );
     4a8:	371d                	jal	3ce <_write.constprop.0>
}
     4aa:	40a2                	lw	ra,8(sp)
     4ac:	8522                	mv	a0,s0
     4ae:	4412                	lw	s0,4(sp)
     4b0:	0131                	addi	sp,sp,12
     4b2:	8082                	ret

000004b4 <handle_reset>:
	asm volatile( "\n\
     4b4:	20000197          	auipc	gp,0x20000
     4b8:	34c18193          	addi	gp,gp,844 # 20000800 <__global_pointer$>
     4bc:	00018113          	mv	sp,gp
     4c0:	08000513          	li	a0,128
     4c4:	30051073          	csrw	mstatus,a0
     4c8:	468d                	li	a3,3
     4ca:	00000517          	auipc	a0,0x0
     4ce:	b3650513          	addi	a0,a0,-1226 # 0 <InterruptVector>
     4d2:	8d55                	or	a0,a0,a3
     4d4:	30551073          	csrw	mtvec,a0
asm volatile(
     4d8:	20000517          	auipc	a0,0x20000
     4dc:	b2850513          	addi	a0,a0,-1240 # 20000000 <ssd1306_buffer>
     4e0:	c0018593          	addi	a1,gp,-1024 # 20000400 <_ebss>
     4e4:	4601                	li	a2,0
     4e6:	00b55663          	bge	a0,a1,4f2 <handle_reset+0x3e>
     4ea:	c110                	sw	a2,0(a0)
     4ec:	0511                	addi	a0,a0,4
     4ee:	feb54ee3          	blt	a0,a1,4ea <handle_reset+0x36>
     4f2:	00001517          	auipc	a0,0x1
     4f6:	23650513          	addi	a0,a0,566 # 1728 <_data_lma>
     4fa:	20000597          	auipc	a1,0x20000
     4fe:	b0658593          	addi	a1,a1,-1274 # 20000000 <ssd1306_buffer>
     502:	20000617          	auipc	a2,0x20000
     506:	afe60613          	addi	a2,a2,-1282 # 20000000 <ssd1306_buffer>
     50a:	00c58863          	beq	a1,a2,51a <handle_reset+0x66>
     50e:	4114                	lw	a3,0(a0)
     510:	c194                	sw	a3,0(a1)
     512:	0511                	addi	a0,a0,4
     514:	0591                	addi	a1,a1,4
     516:	fec59ae3          	bne	a1,a2,50a <handle_reset+0x56>
	SysTick->CTLR = 1;
     51a:	e000f7b7          	lui	a5,0xe000f
     51e:	4705                	li	a4,1
     520:	c398                	sw	a4,0(a5)
asm volatile(
     522:	6785                	lui	a5,0x1
     524:	b1078793          	addi	a5,a5,-1264 # b10 <main>
     528:	34179073          	csrw	mepc,a5
     52c:	30200073          	mret

00000530 <ADC1_IRQHandler>:
	asm volatile( "1: j 1b" );
     530:	a001                	j	530 <ADC1_IRQHandler>

00000532 <NMI_Handler>:
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
     532:	40021737          	lui	a4,0x40021
     536:	471c                	lw	a5,8(a4)
     538:	008006b7          	lui	a3,0x800
     53c:	8fd5                	or	a5,a5,a3
     53e:	c71c                	sw	a5,8(a4)

00000540 <strlen>:
size_t strlen(const char *s) { const char *a = s;for (; *s; s++);return s-a; }
     540:	87aa                	mv	a5,a0
     542:	0007c703          	lbu	a4,0(a5)
     546:	e701                	bnez	a4,54e <strlen+0xe>
     548:	40a78533          	sub	a0,a5,a0
     54c:	8082                	ret
     54e:	0785                	addi	a5,a5,1
     550:	bfcd                	j	542 <strlen+0x2>

00000552 <mini_vpprintf>:
{
     552:	fa410113          	addi	sp,sp,-92
     556:	c8a6                	sw	s1,80(sp)
     558:	cc86                	sw	ra,88(sp)
     55a:	caa2                	sw	s0,84(sp)
     55c:	c02a                	sw	a0,0(sp)
     55e:	c22e                	sw	a1,4(sp)
     560:	84b2                	mv	s1,a2
     562:	87b6                	mv	a5,a3
	int n = 0;
     564:	c802                	sw	zero,16(sp)
	while ((ch=*(fmt++))) {
     566:	0004c703          	lbu	a4,0(s1)
     56a:	00148413          	addi	s0,s1,1
     56e:	00e10fa3          	sb	a4,31(sp)
     572:	eb01                	bnez	a4,582 <mini_vpprintf+0x30>
}
     574:	40e6                	lw	ra,88(sp)
     576:	4456                	lw	s0,84(sp)
     578:	4542                	lw	a0,16(sp)
     57a:	44c6                	lw	s1,80(sp)
     57c:	05c10113          	addi	sp,sp,92
     580:	8082                	ret
		if (ch!='%') {
     582:	02500693          	li	a3,37
     586:	00d70f63          	beq	a4,a3,5a4 <mini_vpprintf+0x52>
     58a:	c43e                	sw	a5,8(sp)
			len = puts(&ch, len, buf);
     58c:	4612                	lw	a2,4(sp)
     58e:	4782                	lw	a5,0(sp)
     590:	4585                	li	a1,1
     592:	01f10513          	addi	a0,sp,31
     596:	9782                	jalr	a5
	while ((ch=*(fmt++))) {
     598:	84a2                	mv	s1,s0
		n = n + len;
     59a:	47c2                	lw	a5,16(sp)
     59c:	97aa                	add	a5,a5,a0
     59e:	c83e                	sw	a5,16(sp)
     5a0:	47a2                	lw	a5,8(sp)
     5a2:	b7d1                	j	566 <mini_vpprintf+0x14>
			ch=*(fmt++);
     5a4:	0014c683          	lbu	a3,1(s1)
			if (ch == '0') pad_char = '0';
     5a8:	03000613          	li	a2,48
			ch=*(fmt++);
     5ac:	00248713          	addi	a4,s1,2
     5b0:	00d10fa3          	sb	a3,31(sp)
			if (ch == '0') pad_char = '0';
     5b4:	03000413          	li	s0,48
     5b8:	08c69063          	bne	a3,a2,638 <mini_vpprintf+0xe6>
				ch=*(fmt++);
     5bc:	84ba                	mv	s1,a4
     5be:	4601                	li	a2,0
     5c0:	4701                	li	a4,0
			while (ch >= '0' && ch <= '9') {
     5c2:	4525                	li	a0,9
     5c4:	a811                	j	5d8 <mini_vpprintf+0x86>
				pad_to = pad_to * 10 + (ch - '0');
     5c6:	00271693          	slli	a3,a4,0x2
				ch=*(fmt++);
     5ca:	0485                	addi	s1,s1,1
				pad_to = pad_to * 10 + (ch - '0');
     5cc:	9736                	add	a4,a4,a3
				ch=*(fmt++);
     5ce:	fff4c683          	lbu	a3,-1(s1)
				pad_to = pad_to * 10 + (ch - '0');
     5d2:	0706                	slli	a4,a4,0x1
     5d4:	972e                	add	a4,a4,a1
				ch=*(fmt++);
     5d6:	4605                	li	a2,1
			while (ch >= '0' && ch <= '9') {
     5d8:	fd068593          	addi	a1,a3,-48 # 7fffd0 <tstcracha.c.b3ef1d14+0x7fda90>
     5dc:	0ff5f313          	andi	t1,a1,255
     5e0:	fe6573e3          	bgeu	a0,t1,5c6 <mini_vpprintf+0x74>
     5e4:	c219                	beqz	a2,5ea <mini_vpprintf+0x98>
     5e6:	00d10fa3          	sb	a3,31(sp)
			if(pad_to > (signed int) sizeof(bf)) {
     5ea:	c63a                	sw	a4,12(sp)
     5ec:	4661                	li	a2,24
     5ee:	00e65363          	bge	a2,a4,5f4 <mini_vpprintf+0xa2>
     5f2:	c632                	sw	a2,12(sp)
			if (ch == 'l') {
     5f4:	06c00593          	li	a1,108
			char l = 0;
     5f8:	4601                	li	a2,0
			if (ch == 'l') {
     5fa:	00b69863          	bne	a3,a1,60a <mini_vpprintf+0xb8>
				ch=*(fmt++);
     5fe:	0004c683          	lbu	a3,0(s1)
				l = 1;
     602:	4605                	li	a2,1
				ch=*(fmt++);
     604:	0485                	addi	s1,s1,1
     606:	00d10fa3          	sb	a3,31(sp)
			switch (ch) {
     60a:	01f14683          	lbu	a3,31(sp)
     60e:	06400593          	li	a1,100
     612:	06b68363          	beq	a3,a1,678 <mini_vpprintf+0x126>
     616:	02d5e463          	bltu	a1,a3,63e <mini_vpprintf+0xec>
     61a:	05800713          	li	a4,88
     61e:	0ae68063          	beq	a3,a4,6be <mini_vpprintf+0x16c>
     622:	06300713          	li	a4,99
     626:	0ae68d63          	beq	a3,a4,6e0 <mini_vpprintf+0x18e>
     62a:	d6a9                	beqz	a3,574 <mini_vpprintf+0x22>
					len = puts(&ch, len, buf);
     62c:	4612                	lw	a2,4(sp)
     62e:	c43e                	sw	a5,8(sp)
     630:	4585                	li	a1,1
     632:	01f10513          	addi	a0,sp,31
     636:	a0bd                	j	6a4 <mini_vpprintf+0x152>
			char pad_char = ' ';
     638:	02000413          	li	s0,32
     63c:	b741                	j	5bc <mini_vpprintf+0x6a>
			switch (ch) {
     63e:	07500593          	li	a1,117
     642:	02b68b63          	beq	a3,a1,678 <mini_vpprintf+0x126>
     646:	07800613          	li	a2,120
     64a:	06c68a63          	beq	a3,a2,6be <mini_vpprintf+0x16c>
     64e:	07300613          	li	a2,115
     652:	fcc69de3          	bne	a3,a2,62c <mini_vpprintf+0xda>
     656:	cc3a                	sw	a4,24(sp)
					ptr = va_arg(va, char*);
     658:	00478713          	addi	a4,a5,4
     65c:	439c                	lw	a5,0(a5)
     65e:	c43a                	sw	a4,8(sp)
					len = mini_strlen(ptr);
     660:	853e                	mv	a0,a5
     662:	ca3e                	sw	a5,20(sp)
     664:	3df1                	jal	540 <strlen>
					if (pad_to > 0) {
     666:	4762                	lw	a4,24(sp)
     668:	47d2                	lw	a5,20(sp)
					len = mini_strlen(ptr);
     66a:	85aa                	mv	a1,a0
					if (pad_to > 0) {
     66c:	c759                	beqz	a4,6fa <mini_vpprintf+0x1a8>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
     66e:	46b2                	lw	a3,12(sp)
     670:	1838                	addi	a4,sp,56
     672:	8622                	mv	a2,s0
     674:	853e                	mv	a0,a5
     676:	a01d                	j	69c <mini_vpprintf+0x14a>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     678:	00478713          	addi	a4,a5,4
     67c:	c43a                	sw	a4,8(sp)
					if(l) {
     67e:	c615                	beqz	a2,6aa <mini_vpprintf+0x158>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     680:	f8b68693          	addi	a3,a3,-117
     684:	1018                	addi	a4,sp,32
     686:	0016b693          	seqz	a3,a3
     68a:	4388                	lw	a0,0(a5)
     68c:	4601                	li	a2,0
     68e:	45a9                	li	a1,10
     690:	3e3d                	jal	1ce <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     692:	46b2                	lw	a3,12(sp)
     694:	1838                	addi	a4,sp,56
     696:	8622                	mv	a2,s0
     698:	85aa                	mv	a1,a0
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     69a:	1008                	addi	a0,sp,32
     69c:	3449                	jal	11e <mini_pad>
					len = puts(bf, len, buf);
     69e:	4612                	lw	a2,4(sp)
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     6a0:	85aa                	mv	a1,a0
					len = puts(bf, len, buf);
     6a2:	1828                	addi	a0,sp,56
					len = puts(&ch, len, buf);
     6a4:	4782                	lw	a5,0(sp)
     6a6:	9782                	jalr	a5
					break;
     6a8:	bdcd                	j	59a <mini_vpprintf+0x48>
						if(ch == 'u') {
     6aa:	07500713          	li	a4,117
     6ae:	00e69563          	bne	a3,a4,6b8 <mini_vpprintf+0x166>
	if (radix > 16)
     6b2:	1018                	addi	a4,sp,32
     6b4:	4685                	li	a3,1
     6b6:	bfd1                	j	68a <mini_vpprintf+0x138>
     6b8:	1018                	addi	a4,sp,32
     6ba:	4681                	li	a3,0
     6bc:	b7f9                	j	68a <mini_vpprintf+0x138>
					if(l) {
     6be:	4388                	lw	a0,0(a5)
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     6c0:	00478713          	addi	a4,a5,4
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
     6c4:	fa868613          	addi	a2,a3,-88
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
     6c8:	c43a                	sw	a4,8(sp)
	if (radix > 16)
     6ca:	4685                	li	a3,1
     6cc:	1018                	addi	a4,sp,32
     6ce:	00163613          	seqz	a2,a2
     6d2:	45c1                	li	a1,16
     6d4:	3ced                	jal	1ce <mini_itoa.part.0>
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
     6d6:	46b2                	lw	a3,12(sp)
     6d8:	85aa                	mv	a1,a0
     6da:	1838                	addi	a4,sp,56
     6dc:	8622                	mv	a2,s0
     6de:	bf75                	j	69a <mini_vpprintf+0x148>
					ch = (char)(va_arg(va, int));
     6e0:	00478713          	addi	a4,a5,4
     6e4:	439c                	lw	a5,0(a5)
     6e6:	c43a                	sw	a4,8(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     6e8:	46b2                	lw	a3,12(sp)
					ch = (char)(va_arg(va, int));
     6ea:	00f10fa3          	sb	a5,31(sp)
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
     6ee:	1838                	addi	a4,sp,56
     6f0:	8622                	mv	a2,s0
     6f2:	4585                	li	a1,1
     6f4:	01f10513          	addi	a0,sp,31
     6f8:	b755                	j	69c <mini_vpprintf+0x14a>
						len = puts(ptr, len, buf);
     6fa:	4612                	lw	a2,4(sp)
     6fc:	853e                	mv	a0,a5
     6fe:	b75d                	j	6a4 <mini_vpprintf+0x152>

00000700 <printf>:
{
     700:	fdc10113          	addi	sp,sp,-36
     704:	ca32                	sw	a2,20(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     706:	862a                	mv	a2,a0
{
     708:	c82e                	sw	a1,16(sp)
     70a:	cc36                	sw	a3,24(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     70c:	4581                	li	a1,0
	va_start( args, format );
     70e:	0814                	addi	a3,sp,16
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     710:	4a000513          	li	a0,1184
{
     714:	c606                	sw	ra,12(sp)
     716:	ce3a                	sw	a4,28(sp)
     718:	d03e                	sw	a5,32(sp)
	va_start( args, format );
     71a:	c036                	sw	a3,0(sp)
	int ret_status = mini_vpprintf(__puts_uart, 0, format, args);
     71c:	3d1d                	jal	552 <mini_vpprintf>
}
     71e:	40b2                	lw	ra,12(sp)
     720:	02410113          	addi	sp,sp,36
     724:	8082                	ret

00000726 <ssd1306_i2c_error.isra.0>:
 * error handler
 */
uint8_t ssd1306_i2c_error(uint8_t err)
{
	// report error
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     726:	00251793          	slli	a5,a0,0x2
     72a:	6505                	lui	a0,0x1
     72c:	dd850513          	addi	a0,a0,-552 # dd8 <errstr>
     730:	953e                	add	a0,a0,a5
     732:	410c                	lw	a1,0(a0)
     734:	6505                	lui	a0,0x1
uint8_t ssd1306_i2c_error(uint8_t err)
     736:	1151                	addi	sp,sp,-12
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     738:	d2850513          	addi	a0,a0,-728 # d28 <main+0x218>
uint8_t ssd1306_i2c_error(uint8_t err)
     73c:	c406                	sw	ra,8(sp)
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     73e:	37c9                	jal	700 <printf>
	
	// reset & initialize I2C
	ssd1306_i2c_setup();

	return 1;
}
     740:	40a2                	lw	ra,8(sp)
     742:	0131                	addi	sp,sp,12
	ssd1306_i2c_setup();
     744:	b6a1                	j	28c <ssd1306_i2c_setup>

00000746 <ssd1306_i2c_send.constprop.0.isra.0>:
}
#else
/*
 * low-level packet send for blocking polled operation via i2c
 */
uint8_t ssd1306_i2c_send(uint8_t addr, uint8_t *data, uint8_t sz)
     746:	67e1                	lui	a5,0x18
     748:	6a178793          	addi	a5,a5,1697 # 186a1 <tstcracha.c.b3ef1d14+0x16161>
{
	int32_t timeout;
	
	// wait for not busy
	timeout = TIMEOUT_MAX;
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     74c:	40005637          	lui	a2,0x40005
     750:	41865683          	lhu	a3,1048(a2) # 40005418 <__global_pointer$+0x20004c18>
     754:	40060713          	addi	a4,a2,1024
     758:	8a89                	andi	a3,a3,2
     75a:	cecd                	beqz	a3,814 <ssd1306_i2c_send.constprop.0.isra.0+0xce>
     75c:	17fd                	addi	a5,a5,-1
     75e:	fbed                	bnez	a5,750 <ssd1306_i2c_send.constprop.0.isra.0+0xa>
	if(timeout==-1)
		return ssd1306_i2c_error(0);
     760:	4501                	li	a0,0
     762:	a005                	j	782 <ssd1306_i2c_send.constprop.0.isra.0+0x3c>
	// send 7-bit address + write flag
	I2C1->DATAR = addr<<1;

	// wait for transmit condition
	timeout = TIMEOUT_MAX;
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     764:	177d                	addi	a4,a4,-1
     766:	eb39                	bnez	a4,7bc <ssd1306_i2c_send.constprop.0.isra.0+0x76>
	if(timeout==-1)
		return ssd1306_i2c_error(2);
     768:	4509                	li	a0,2
     76a:	a821                	j	782 <ssd1306_i2c_send.constprop.0.isra.0+0x3c>

	// send data one byte at a time
	while(sz--)
     76c:	873e                	mv	a4,a5
	{
		// wait for TX Empty
		timeout = TIMEOUT_MAX;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     76e:	41435683          	lhu	a3,1044(t1)
     772:	40030613          	addi	a2,t1,1024
     776:	0806f693          	andi	a3,a3,128
     77a:	e689                	bnez	a3,784 <ssd1306_i2c_send.constprop.0.isra.0+0x3e>
     77c:	177d                	addi	a4,a4,-1
     77e:	fb65                	bnez	a4,76e <ssd1306_i2c_send.constprop.0.isra.0+0x28>
		if(timeout==-1)
			return ssd1306_i2c_error(3);
     780:	450d                	li	a0,3
		return ssd1306_i2c_error(0);
     782:	b755                	j	726 <ssd1306_i2c_error.isra.0>
		
		// send command
		I2C1->DATAR = *data++;
     784:	00054703          	lbu	a4,0(a0)
     788:	0505                	addi	a0,a0,1
     78a:	00e61823          	sh	a4,16(a2)
     78e:	a889                	j	7e0 <ssd1306_i2c_send.constprop.0.isra.0+0x9a>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
	if(timeout==-1)
		return ssd1306_i2c_error(4);

	// set STOP condition
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     790:	0006d783          	lhu	a5,0(a3)
     794:	07c2                	slli	a5,a5,0x10
     796:	83c1                	srli	a5,a5,0x10
     798:	2007e793          	ori	a5,a5,512
     79c:	00f69023          	sh	a5,0(a3)
	
	// we're happy
	return 0;
}
     7a0:	8082                	ret
	I2C1->DATAR = addr<<1;
     7a2:	07800793          	li	a5,120
     7a6:	6761                	lui	a4,0x18
	return (status & event_mask) == event_mask;
     7a8:	000706b7          	lui	a3,0x70
	I2C1->DATAR = addr<<1;
     7ac:	00f61823          	sh	a5,16(a2)
     7b0:	6a170713          	addi	a4,a4,1697 # 186a1 <tstcracha.c.b3ef1d14+0x16161>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     7b4:	40005337          	lui	t1,0x40005
	return (status & event_mask) == event_mask;
     7b8:	08268693          	addi	a3,a3,130 # 70082 <tstcracha.c.b3ef1d14+0x6db42>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     7bc:	41435783          	lhu	a5,1044(t1) # 40005414 <__global_pointer$+0x20004c14>
     7c0:	01079613          	slli	a2,a5,0x10
     7c4:	41835783          	lhu	a5,1048(t1)
     7c8:	8241                	srli	a2,a2,0x10
     7ca:	07c2                	slli	a5,a5,0x10
     7cc:	8fd1                	or	a5,a5,a2
	return (status & event_mask) == event_mask;
     7ce:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     7d0:	f8d79ae3          	bne	a5,a3,764 <ssd1306_i2c_send.constprop.0.isra.0+0x1e>
     7d4:	67e1                	lui	a5,0x18
     7d6:	95aa                	add	a1,a1,a0
     7d8:	6a178793          	addi	a5,a5,1697 # 186a1 <tstcracha.c.b3ef1d14+0x16161>
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     7dc:	40005337          	lui	t1,0x40005
	while(sz--)
     7e0:	f8b516e3          	bne	a0,a1,76c <ssd1306_i2c_send.constprop.0.isra.0+0x26>
	return (status & event_mask) == event_mask;
     7e4:	00070637          	lui	a2,0x70
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     7e8:	40005537          	lui	a0,0x40005
	return (status & event_mask) == event_mask;
     7ec:	08460613          	addi	a2,a2,132 # 70084 <tstcracha.c.b3ef1d14+0x6db44>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     7f0:	41455703          	lhu	a4,1044(a0) # 40005414 <__global_pointer$+0x20004c14>
     7f4:	40050693          	addi	a3,a0,1024
     7f8:	01071593          	slli	a1,a4,0x10
     7fc:	0186d703          	lhu	a4,24(a3)
     800:	81c1                	srli	a1,a1,0x10
     802:	0742                	slli	a4,a4,0x10
     804:	8f4d                	or	a4,a4,a1
	return (status & event_mask) == event_mask;
     806:	8f71                	and	a4,a4,a2
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     808:	f8c704e3          	beq	a4,a2,790 <ssd1306_i2c_send.constprop.0.isra.0+0x4a>
     80c:	17fd                	addi	a5,a5,-1
     80e:	f3ed                	bnez	a5,7f0 <ssd1306_i2c_send.constprop.0.isra.0+0xaa>
		return ssd1306_i2c_error(4);
     810:	4511                	li	a0,4
     812:	bf85                	j	782 <ssd1306_i2c_send.constprop.0.isra.0+0x3c>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     814:	00075783          	lhu	a5,0(a4)
	return (status & event_mask) == event_mask;
     818:	000306b7          	lui	a3,0x30
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     81c:	400052b7          	lui	t0,0x40005
	I2C1->CTLR1 |= I2C_CTLR1_START;
     820:	07c2                	slli	a5,a5,0x10
     822:	83c1                	srli	a5,a5,0x10
     824:	1007e793          	ori	a5,a5,256
     828:	00f71023          	sh	a5,0(a4)
     82c:	6761                	lui	a4,0x18
     82e:	6a170713          	addi	a4,a4,1697 # 186a1 <tstcracha.c.b3ef1d14+0x16161>
	return (status & event_mask) == event_mask;
     832:	0685                	addi	a3,a3,1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     834:	4142d783          	lhu	a5,1044(t0) # 40005414 <__global_pointer$+0x20004c14>
     838:	40028613          	addi	a2,t0,1024
     83c:	01079313          	slli	t1,a5,0x10
     840:	01865783          	lhu	a5,24(a2)
     844:	01035313          	srli	t1,t1,0x10
     848:	07c2                	slli	a5,a5,0x10
     84a:	0067e7b3          	or	a5,a5,t1
	return (status & event_mask) == event_mask;
     84e:	8ff5                	and	a5,a5,a3
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     850:	f4d789e3          	beq	a5,a3,7a2 <ssd1306_i2c_send.constprop.0.isra.0+0x5c>
     854:	177d                	addi	a4,a4,-1
     856:	ff79                	bnez	a4,834 <ssd1306_i2c_send.constprop.0.isra.0+0xee>
		return ssd1306_i2c_error(1);
     858:	4505                	li	a0,1
     85a:	b725                	j	782 <ssd1306_i2c_send.constprop.0.isra.0+0x3c>

0000085c <ssd1306_cmd>:
{
     85c:	7179                	addi	sp,sp,-48
	
	/* build command or data packets */
	if(cmd)
	{
		pkt[0] = 0;
		pkt[1] = *data;
     85e:	00a100a3          	sb	a0,1(sp)
	else
	{
		pkt[0] = 0x40;
		memcpy(&pkt[1], data, sz);
	}
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     862:	4589                	li	a1,2
     864:	850a                	mv	a0,sp
     866:	d606                	sw	ra,44(sp)
		pkt[0] = 0;
     868:	00010023          	sb	zero,0(sp)
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     86c:	3de9                	jal	746 <ssd1306_i2c_send.constprop.0.isra.0>
}
     86e:	50b2                	lw	ra,44(sp)
     870:	4501                	li	a0,0
     872:	6145                	addi	sp,sp,48
     874:	8082                	ret

00000876 <memset>:
void *memset(void *dest, int c, size_t n) { unsigned char *s = dest; for (; n; n--, s++) *s = c; return dest; }
     876:	962a                	add	a2,a2,a0
     878:	87aa                	mv	a5,a0
     87a:	00c79363          	bne	a5,a2,880 <memset+0xa>
     87e:	8082                	ret
     880:	00b78023          	sb	a1,0(a5)
     884:	0785                	addi	a5,a5,1
     886:	bfd5                	j	87a <memset+0x4>

00000888 <memcpy>:
{
     888:	4781                	li	a5,0
	for (; n; n--) *d++ = *s++;
     88a:	00f61363          	bne	a2,a5,890 <memcpy+0x8>
}
     88e:	8082                	ret
	for (; n; n--) *d++ = *s++;
     890:	00f58733          	add	a4,a1,a5
     894:	00074683          	lbu	a3,0(a4)
     898:	00f50733          	add	a4,a0,a5
     89c:	0785                	addi	a5,a5,1
     89e:	00d70023          	sb	a3,0(a4)
     8a2:	b7e5                	j	88a <memcpy+0x2>

000008a4 <ssd1306_refresh>:
{
     8a4:	7179                	addi	sp,sp,-48
	ssd1306_cmd(SSD1306_COLUMNADDR);
     8a6:	02100513          	li	a0,33
{
     8aa:	d606                	sw	ra,44(sp)
     8ac:	d422                	sw	s0,40(sp)
     8ae:	d226                	sw	s1,36(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
     8b0:	3775                	jal	85c <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
     8b2:	4501                	li	a0,0
     8b4:	3765                	jal	85c <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
     8b6:	07f00513          	li	a0,127
     8ba:	374d                	jal	85c <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     8bc:	02200513          	li	a0,34
     8c0:	3f71                	jal	85c <ssd1306_cmd>
	ssd1306_cmd(0); // Page start address (0 = reset)
     8c2:	4501                	li	a0,0
     8c4:	3f61                	jal	85c <ssd1306_cmd>
	ssd1306_cmd(7); // Page end address
     8c6:	20000437          	lui	s0,0x20000
     8ca:	451d                	li	a0,7
     8cc:	00040413          	mv	s0,s0
     8d0:	3771                	jal	85c <ssd1306_cmd>
    for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ)
     8d2:	40040493          	addi	s1,s0,1024 # 20000400 <_ebss>
		pkt[0] = 0x40;
     8d6:	04000793          	li	a5,64
		memcpy(&pkt[1], data, sz);
     8da:	85a2                	mv	a1,s0
     8dc:	02000613          	li	a2,32
     8e0:	00110513          	addi	a0,sp,1
		pkt[0] = 0x40;
     8e4:	00f10023          	sb	a5,0(sp)
		memcpy(&pkt[1], data, sz);
     8e8:	3745                	jal	888 <memcpy>
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     8ea:	02100593          	li	a1,33
     8ee:	850a                	mv	a0,sp
     8f0:	02040413          	addi	s0,s0,32
     8f4:	3d89                	jal	746 <ssd1306_i2c_send.constprop.0.isra.0>
     8f6:	fe9410e3          	bne	s0,s1,8d6 <ssd1306_refresh+0x32>
}
     8fa:	50b2                	lw	ra,44(sp)
     8fc:	5422                	lw	s0,40(sp)
     8fe:	5492                	lw	s1,36(sp)
     900:	6145                	addi	sp,sp,48
     902:	8082                	ret

00000904 <show_screen>:

}

// Demo screens
#define	NSCREENS 2
void show_screen (int scr) {
     904:	fd410113          	addi	sp,sp,-44
     908:	d026                	sw	s1,32(sp)
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     90a:	200004b7          	lui	s1,0x20000
     90e:	d222                	sw	s0,36(sp)
     910:	40000613          	li	a2,1024
     914:	842a                	mv	s0,a0
     916:	4581                	li	a1,0
     918:	00048513          	mv	a0,s1
     91c:	d406                	sw	ra,40(sp)
     91e:	3fa1                	jal	876 <memset>
	ssd1306_setbuf(0);
	switch (scr) {
     920:	c811                	beqz	s0,934 <show_screen+0x30>
     922:	4785                	li	a5,1
     924:	0ef40563          	beq	s0,a5,a0e <show_screen+0x10a>
		case 1:
			ssd1306_drawImage(40, 8, storm, 48, 48, 0);
			break;
	}
	ssd1306_refresh();
}
     928:	5412                	lw	s0,36(sp)
     92a:	50a2                	lw	ra,40(sp)
     92c:	5482                	lw	s1,32(sp)
     92e:	02c10113          	addi	sp,sp,44
	ssd1306_refresh();
     932:	bf8d                	j	8a4 <ssd1306_refresh>
	switch (scr) {
     934:	6685                	lui	a3,0x1
     936:	d5868693          	addi	a3,a3,-680 # d58 <main+0x248>
     93a:	43b1                	li	t2,12
 */
void ssd1306_drawstr_sz(uint8_t x, uint8_t y, char *str, uint8_t color, font_size_t font_size)
{
	uint8_t c;
	
	while((c=*str++))
     93c:	0006c783          	lbu	a5,0(a3)
     940:	0685                	addi	a3,a3,1
     942:	cbc1                	beqz	a5,9d2 <show_screen+0xce>
     944:	6705                	lui	a4,0x1
        d = fontdata[(chr << 3) + i];
     946:	078e                	slli	a5,a5,0x3
     948:	dec70713          	addi	a4,a4,-532 # dec <fontdata>
     94c:	01038313          	addi	t1,t2,16
     950:	97ba                	add	a5,a5,a4
     952:	4401                	li	s0,0
     954:	0ff37313          	andi	t1,t1,255
     958:	00140493          	addi	s1,s0,1
     95c:	0007c283          	lbu	t0,0(a5)
     960:	0ff4f713          	andi	a4,s1,255
     964:	c03a                	sw	a4,0(sp)
     966:	849e                	mv	s1,t2
                    ssd1306_drawPixel(x + (j * font_scale) + k, y + (i * font_scale) + l, col);
     968:	0072d613          	srli	a2,t0,0x7
     96c:	8526                	mv	a0,s1
     96e:	85a2                	mv	a1,s0
     970:	ce3e                	sw	a5,28(sp)
     972:	cc1a                	sw	t1,24(sp)
     974:	ca36                	sw	a3,20(sp)
     976:	c81e                	sw	t2,16(sp)
     978:	c616                	sw	t0,12(sp)
     97a:	c232                	sw	a2,4(sp)
     97c:	32b5                	jal	2e8 <ssd1306_drawPixel>
     97e:	4612                	lw	a2,4(sp)
     980:	4582                	lw	a1,0(sp)
     982:	8526                	mv	a0,s1
     984:	3295                	jal	2e8 <ssd1306_drawPixel>
     986:	4612                	lw	a2,4(sp)
     988:	00148513          	addi	a0,s1,1 # 20000001 <ssd1306_buffer+0x1>
     98c:	0ff57513          	andi	a0,a0,255
     990:	85a2                	mv	a1,s0
     992:	c432                	sw	a2,8(sp)
     994:	c22a                	sw	a0,4(sp)
     996:	3a89                	jal	2e8 <ssd1306_drawPixel>
     998:	4622                	lw	a2,8(sp)
     99a:	4582                	lw	a1,0(sp)
     99c:	4512                	lw	a0,4(sp)
     99e:	32a9                	jal	2e8 <ssd1306_drawPixel>
            d <<= 1;
     9a0:	42b2                	lw	t0,12(sp)
        for (j = 0; j < 8; j++)
     9a2:	4362                	lw	t1,24(sp)
     9a4:	00248713          	addi	a4,s1,2
            d <<= 1;
     9a8:	0286                	slli	t0,t0,0x1
        for (j = 0; j < 8; j++)
     9aa:	0ff77493          	andi	s1,a4,255
     9ae:	43c2                	lw	t2,16(sp)
     9b0:	46d2                	lw	a3,20(sp)
     9b2:	47f2                	lw	a5,28(sp)
            d <<= 1;
     9b4:	0ff2f293          	andi	t0,t0,255
        for (j = 0; j < 8; j++)
     9b8:	fa9318e3          	bne	t1,s1,968 <show_screen+0x64>
    for (i = 0; i < 8; i++)
     9bc:	0409                	addi	s0,s0,2
     9be:	0ff47413          	andi	s0,s0,255
     9c2:	4741                	li	a4,16
     9c4:	0785                	addi	a5,a5,1
     9c6:	f8e419e3          	bne	s0,a4,958 <show_screen+0x54>
	{
		ssd1306_drawchar_sz(x, y, c, color, font_size);
		x += 8 * font_size;
		if(x>128 - 8 * font_size)
     9ca:	07c00793          	li	a5,124
     9ce:	02f31e63          	bne	t1,a5,a0a <show_screen+0x106>
			ssd1306_drawstr(0,24,"youtube.com/", 1);
     9d2:	6605                	lui	a2,0x1
     9d4:	d6060613          	addi	a2,a2,-672 # d60 <main+0x250>
     9d8:	45e1                	li	a1,24
     9da:	4501                	li	a0,0
     9dc:	3a89                	jal	32e <ssd1306_drawstr.constprop.0>
			ssd1306_drawstr(8,32,"@DQSoft", 1);
     9de:	6605                	lui	a2,0x1
     9e0:	d7060613          	addi	a2,a2,-656 # d70 <main+0x260>
     9e4:	02000593          	li	a1,32
     9e8:	4521                	li	a0,8
     9ea:	3291                	jal	32e <ssd1306_drawstr.constprop.0>
			ssd1306_drawstr(0,48,"dqsoft.blogspot", 1);
     9ec:	6605                	lui	a2,0x1
     9ee:	d7860613          	addi	a2,a2,-648 # d78 <main+0x268>
     9f2:	03000593          	li	a1,48
     9f6:	4501                	li	a0,0
     9f8:	3a1d                	jal	32e <ssd1306_drawstr.constprop.0>
			ssd1306_drawstr(8,56,".com", 1);
     9fa:	6605                	lui	a2,0x1
     9fc:	d8860613          	addi	a2,a2,-632 # d88 <main+0x278>
     a00:	03800593          	li	a1,56
     a04:	4521                	li	a0,8
     a06:	3225                	jal	32e <ssd1306_drawstr.constprop.0>
			break;
     a08:	b705                	j	928 <show_screen+0x24>
     a0a:	839a                	mv	t2,t1
     a0c:	bf05                	j	93c <show_screen+0x38>
     a0e:	6785                	lui	a5,0x1
     a10:	60878793          	addi	a5,a5,1544 # 1608 <storm>
     a14:	c43e                	sw	a5,8(sp)
     a16:	00048793          	mv	a5,s1
	switch (scr) {
     a1a:	4581                	li	a1,0
     a1c:	46a1                	li	a3,8
     a1e:	c63e                	sw	a5,12(sp)
		uint8_t v_mask = 1 << (y_absolute & 7);
     a20:	4785                	li	a5,1
     a22:	0076f713          	andi	a4,a3,7
     a26:	00e79733          	sll	a4,a5,a4
     a2a:	47a2                	lw	a5,8(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     a2c:	01871493          	slli	s1,a4,0x18
     a30:	84e1                	srai	s1,s1,0x18
     a32:	00b783b3          	add	t2,a5,a1
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     a36:	0036d793          	srli	a5,a3,0x3
     a3a:	079e                	slli	a5,a5,0x7
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     a3c:	fff4c713          	not	a4,s1
     a40:	05878793          	addi	a5,a5,88
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     a44:	05800613          	li	a2,88
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     a48:	c83a                	sw	a4,16(sp)
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     a4a:	0003c703          	lbu	a4,0(t2)
     a4e:	4501                	li	a0,0
     a50:	c23a                	sw	a4,4(sp)
     a52:	4732                	lw	a4,12(sp)
     a54:	00f70333          	add	t1,a4,a5
				uint8_t input_pixel = input_byte & (1 << pixel);
     a58:	4705                	li	a4,1
     a5a:	00a712b3          	sll	t0,a4,a0
     a5e:	4712                	lw	a4,4(sp)
     a60:	00e2f733          	and	a4,t0,a4
     a64:	c03a                	sw	a4,0(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     a66:	42c2                	lw	t0,16(sp)
     a68:	00034703          	lbu	a4,0(t1) # 40005000 <__global_pointer$+0x20004800>
				uint8_t input_pixel = input_byte & (1 << pixel);
     a6c:	00010403          	lb	s0,0(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     a70:	00e2f733          	and	a4,t0,a4
     a74:	4282                	lw	t0,0(sp)
     a76:	0762                	slli	a4,a4,0x18
     a78:	8761                	srai	a4,a4,0x18
     a7a:	00028363          	beqz	t0,a80 <show_screen+0x17c>
     a7e:	8426                	mv	s0,s1
     a80:	8f41                	or	a4,a4,s0
     a82:	00e30023          	sb	a4,0(t1)
			for (pixel = 0; pixel < 8; pixel++) {
     a86:	0505                	addi	a0,a0,1
     a88:	4721                	li	a4,8
     a8a:	0305                	addi	t1,t1,1
     a8c:	fce516e3          	bne	a0,a4,a58 <show_screen+0x154>
		for (uint8_t byte = 0; byte < bytes_to_draw; byte++) {
     a90:	17e1                	addi	a5,a5,-8
     a92:	1661                	addi	a2,a2,-8
     a94:	07c2                	slli	a5,a5,0x10
     a96:	0ff67613          	andi	a2,a2,255
     a9a:	02800713          	li	a4,40
     a9e:	0385                	addi	t2,t2,1
     aa0:	83c1                	srli	a5,a5,0x10
     aa2:	fae614e3          	bne	a2,a4,a4a <show_screen+0x146>
	for (uint8_t line = 0; line < height; line++) {
     aa6:	0685                	addi	a3,a3,1
     aa8:	0599                	addi	a1,a1,6
     aaa:	12000793          	li	a5,288
     aae:	0ff6f693          	andi	a3,a3,255
     ab2:	f6f597e3          	bne	a1,a5,a20 <show_screen+0x11c>
     ab6:	bd8d                	j	928 <show_screen+0x24>

00000ab8 <SystemInit>:
	// CH32V003 flash latency
#if defined(CH32X03x)
	FLASH->ACTLR = FLASH_ACTLR_LATENCY_2;                   // +2 Cycle Latency (Recommended per TRM)
#elif defined(CH32V003)
	#if FUNCONF_SYSTEM_CORE_CLOCK > 25000000
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;               // +1 Cycle Latency
     ab8:	400227b7          	lui	a5,0x40022
     abc:	4705                	li	a4,1
     abe:	c398                	sw	a4,0(a5)
#if defined(FUNCONF_USE_HSI) && FUNCONF_USE_HSI
	#if defined(CH32V30x) || defined(CH32V20x) || defined(CH32V10x)
		EXTEN->EXTEN_CTR |= EXTEN_PLL_HSI_PRE;
	#endif
	#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
		RCC->CFGR0 = BASE_CFGR0;
     ac0:	400217b7          	lui	a5,0x40021
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     ac4:	01080737          	lui	a4,0x1080
		RCC->CFGR0 = BASE_CFGR0;
     ac8:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
		RCC->CTLR  = BASE_CTLR | RCC_HSION | RCC_PLLON; 			// Use HSI, enable PLL.
     acc:	08170713          	addi	a4,a4,129 # 1080081 <tstcracha.c.b3ef1d14+0x107db41>
     ad0:	c398                	sw	a4,0(a5)
	#else
		FLASH->ACTLR = FLASH_ACTLR_LATENCY_1;       		// +1 Cycle Latency
	#endif
#endif

	RCC->INTR  = 0x009F0000;                               // Clear PLL, CSSC, HSE, HSI and LSI ready flags.
     ad2:	009f0737          	lui	a4,0x9f0
     ad6:	c798                	sw	a4,8(a5)

#if defined(FUNCONF_USE_PLL) && FUNCONF_USE_PLL
	while((RCC->CTLR & RCC_PLLRDY) == 0);                       	// Wait till PLL is ready
     ad8:	020006b7          	lui	a3,0x2000
     adc:	40021737          	lui	a4,0x40021
     ae0:	431c                	lw	a5,0(a4)
     ae2:	8ff5                	and	a5,a5,a3
     ae4:	dff5                	beqz	a5,ae0 <SystemInit+0x28>
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     ae6:	435c                	lw	a5,4(a4)
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     ae8:	400216b7          	lui	a3,0x40021
	uint32_t tmp32 = RCC->CFGR0 & ~(0x03);							// clr the SW
     aec:	9bf1                	andi	a5,a5,-4
	RCC->CFGR0 = tmp32 | RCC_SW_PLL;                       			// Select PLL as system clock source
     aee:	0027e793          	ori	a5,a5,2
     af2:	c35c                	sw	a5,4(a4)
	while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08); 	// Wait till PLL is used as system clock source
     af4:	4721                	li	a4,8
     af6:	42dc                	lw	a5,4(a3)
     af8:	8bb1                	andi	a5,a5,12
     afa:	fee79ee3          	bne	a5,a4,af6 <SystemInit+0x3e>
	*DMDATA1 = 0x0;
     afe:	e00007b7          	lui	a5,0xe0000
     b02:	0e07ac23          	sw	zero,248(a5) # e00000f8 <__global_pointer$+0xbffff8f8>
	*DMDATA0 = 0x80;
     b06:	08000713          	li	a4,128
     b0a:	0ee7aa23          	sw	a4,244(a5)
	SetupUART( UART_BRR );
#endif
#if defined( FUNCONF_USE_DEBUGPRINTF ) && FUNCONF_USE_DEBUGPRINTF
	SetupDebugPrintf();
#endif
}
     b0e:	8082                	ret

00000b10 <main>:

int main() {
     b10:	1131                	addi	sp,sp,-20
     b12:	c806                	sw	ra,16(sp)
     b14:	c622                	sw	s0,12(sp)
     b16:	c426                	sw	s1,8(sp)
	// 48MHz internal clock
	SystemInit();
     b18:	3745                	jal	ab8 <SystemInit>
	Delay_Ms(10);
     b1a:	66bd                	lui	a3,0xf
     b1c:	a6068513          	addi	a0,a3,-1440 # ea60 <tstcracha.c.b3ef1d14+0xc520>
     b20:	e98ff0ef          	jal	ra,1b8 <DelaySysTick>

	// Enable GPIOD, GPIOC and GPIOA
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA;
     b24:	400214b7          	lui	s1,0x40021
     b28:	4c9c                	lw	a5,24(s1)
	LED1_PORT->CFGLR &= ~(0xf<<(4*LED1_PIN));
     b2a:	40011437          	lui	s0,0x40011
     b2e:	fff10737          	lui	a4,0xfff10
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA;
     b32:	0347e793          	ori	a5,a5,52
     b36:	cc9c                	sw	a5,24(s1)
	LED1_PORT->CFGLR &= ~(0xf<<(4*LED1_PIN));
     b38:	401c                	lw	a5,0(s0)
     b3a:	177d                	addi	a4,a4,-1
	LED2_PORT->CFGLR &= ~(0xf<<(4*LED2_PIN));
     b3c:	10000637          	lui	a2,0x10000
	LED1_PORT->CFGLR &= ~(0xf<<(4*LED1_PIN));
     b40:	8ff9                	and	a5,a5,a4
     b42:	c01c                	sw	a5,0(s0)
	LED1_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED1_PIN);
     b44:	401c                	lw	a5,0(s0)
     b46:	6741                	lui	a4,0x10
	pin_init();
	Delay_Ms(10);
     b48:	66bd                	lui	a3,0xf
	LED1_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED1_PIN);
     b4a:	8fd9                	or	a5,a5,a4
     b4c:	c01c                	sw	a5,0(s0)
	LED1_OFF();
     b4e:	001007b7          	lui	a5,0x100
     b52:	c81c                	sw	a5,16(s0)
	LED2_PORT->CFGLR &= ~(0xf<<(4*LED2_PIN));
     b54:	4018                	lw	a4,0(s0)
     b56:	fff60793          	addi	a5,a2,-1 # fffffff <tstcracha.c.b3ef1d14+0xfffdabf>
	Delay_Ms(10);
     b5a:	a6068513          	addi	a0,a3,-1440 # ea60 <tstcracha.c.b3ef1d14+0xc520>
	LED2_PORT->CFGLR &= ~(0xf<<(4*LED2_PIN));
     b5e:	8f7d                	and	a4,a4,a5
     b60:	c018                	sw	a4,0(s0)
	LED2_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED2_PIN);
     b62:	401c                	lw	a5,0(s0)
     b64:	8fd1                	or	a5,a5,a2
     b66:	c01c                	sw	a5,0(s0)
	LED2_OFF();
     b68:	008007b7          	lui	a5,0x800
     b6c:	c81c                	sw	a5,16(s0)
	LED3_PORT->CFGLR &= ~(0xf<<(4*LED3_PIN));
     b6e:	80042703          	lw	a4,-2048(s0) # 40010800 <__global_pointer$+0x20010000>
     b72:	77fd                	lui	a5,0xfffff
     b74:	0ff78793          	addi	a5,a5,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
     b78:	8f7d                	and	a4,a4,a5
     b7a:	80e42023          	sw	a4,-2048(s0)
	LED3_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED3_PIN);
     b7e:	80042703          	lw	a4,-2048(s0)
	SW1_PORT->CFGLR &= ~0xf<<(4*SW1_PIN);
     b82:	7641                	lui	a2,0xffff0
	LED3_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED3_PIN);
     b84:	10076713          	ori	a4,a4,256
     b88:	80e42023          	sw	a4,-2048(s0)
	LED3_OFF();
     b8c:	00040737          	lui	a4,0x40
     b90:	80e42823          	sw	a4,-2032(s0)
	LED4_PORT->CFGLR &= ~(0xf<<(4*LED4_PIN));
     b94:	80042703          	lw	a4,-2048(s0)
     b98:	f0f77713          	andi	a4,a4,-241
     b9c:	80e42023          	sw	a4,-2048(s0)
	LED4_PORT->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*LED4_PIN);
     ba0:	80042703          	lw	a4,-2048(s0)
     ba4:	01076713          	ori	a4,a4,16
     ba8:	80e42023          	sw	a4,-2048(s0)
	LED4_OFF();
     bac:	00020737          	lui	a4,0x20
     bb0:	80e42823          	sw	a4,-2032(s0)
	SW1_PORT->CFGLR &= ~0xf<<(4*SW1_PIN);
     bb4:	4018                	lw	a4,0(s0)
     bb6:	8f71                	and	a4,a4,a2
     bb8:	c018                	sw	a4,0(s0)
	SW1_PORT->CFGLR |= (GPIO_Speed_In | GPIO_CNF_IN_FLOATING)<<(4*SW1_PIN);
     bba:	4018                	lw	a4,0(s0)
     bbc:	6611                	lui	a2,0x4
     bbe:	8f51                	or	a4,a4,a2
     bc0:	c018                	sw	a4,0(s0)
	Delay_Ms(10);
     bc2:	df6ff0ef          	jal	ra,1b8 <DelaySysTick>
 * init I2C and GPIO
 */
uint8_t ssd1306_i2c_init(void)
{
	// Enable GPIOC and I2C
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     bc6:	4c98                	lw	a4,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     bc8:	002006b7          	lui	a3,0x200
	// PC1 is SDA, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*1));
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
	
	// PC2 is SCL, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     bcc:	77fd                	lui	a5,0xfffff
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     bce:	01076713          	ori	a4,a4,16
     bd2:	cc98                	sw	a4,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     bd4:	4cd8                	lw	a4,28(s1)
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     bd6:	0ff78793          	addi	a5,a5,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     bda:	8f55                	or	a4,a4,a3
     bdc:	ccd8                	sw	a4,28(s1)
	GPIOC->CFGLR &= ~(0xf<<(4*1));
     bde:	4018                	lw	a4,0(s0)
     be0:	f0f77713          	andi	a4,a4,-241
     be4:	c018                	sw	a4,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
     be6:	4018                	lw	a4,0(s0)
     be8:	0d076713          	ori	a4,a4,208
     bec:	c018                	sw	a4,0(s0)
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     bee:	4018                	lw	a4,0(s0)
     bf0:	8ff9                	and	a5,a5,a4
     bf2:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*2);
     bf4:	401c                	lw	a5,0(s0)
     bf6:	6705                	lui	a4,0x1
     bf8:	d0070713          	addi	a4,a4,-768 # d00 <main+0x1f0>
     bfc:	8fd9                	or	a5,a5,a4
     bfe:	c01c                	sw	a5,0(s0)
{
	// pulse reset
	ssd1306_rst();
	
	// initialize OLED
	uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     c00:	6405                	lui	s0,0x1
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*4);
	GPIOC->BSHR = (1<<(16+4));
#endif

	// load I2C regs
	ssd1306_i2c_setup();
     c02:	e8aff0ef          	jal	ra,28c <ssd1306_i2c_setup>
     c06:	5ec40413          	addi	s0,s0,1516 # 15ec <ssd1306_init_array>
	while(*cmd_list != SSD1306_TERMINATE_CMDS)
     c0a:	00044503          	lbu	a0,0(s0)
     c0e:	0ff00793          	li	a5,255
     c12:	00f51c63          	bne	a0,a5,c2a <main+0x11a>
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     c16:	20000537          	lui	a0,0x20000
     c1a:	40000613          	li	a2,1024
     c1e:	4581                	li	a1,0
     c20:	00050513          	mv	a0,a0
     c24:	3989                	jal	876 <memset>
			return 1;
	}
	
	// clear display
	ssd1306_setbuf(0);
	ssd1306_refresh();
     c26:	39bd                	jal	8a4 <ssd1306_refresh>
     c28:	a021                	j	c30 <main+0x120>
		if(ssd1306_cmd(*cmd_list++))
     c2a:	0405                	addi	s0,s0,1
     c2c:	3905                	jal	85c <ssd1306_cmd>
     c2e:	dd71                	beqz	a0,c0a <main+0xfa>
	// init pins and display
	ssd1306_i2c_init();
  ssd1306_init();

	// set up GPIO for SHUTDOWN
	SHUTDOWN_PORT->CFGLR &= ~(0xf<<(4*SHUTDOWN_PIN));
     c30:	400117b7          	lui	a5,0x40011
     c34:	4398                	lw	a4,0(a5)
	SHUTDOWN_PORT->CFGLR |= (GPIO_Speed_2MHz | GPIO_CNF_OUT_PP)<<(4*SHUTDOWN_PIN);
	POWER_ON();

	// Show screen
	int scr = 0;
	show_screen(scr);
     c36:	4501                	li	a0,0
	int iled = 0;
  uint32_t last_time = SysTick->CNT;	// para auto-shutdown
	while (TRUE) {

		// Test time out		
		if ((SysTick->CNT - last_time) > Ticks_from_Ms(30000)) {
     c38:	0aba94b7          	lui	s1,0xaba9
	SHUTDOWN_PORT->CFGLR &= ~(0xf<<(4*SHUTDOWN_PIN));
     c3c:	9b41                	andi	a4,a4,-16
     c3e:	c398                	sw	a4,0(a5)
	SHUTDOWN_PORT->CFGLR |= (GPIO_Speed_2MHz | GPIO_CNF_OUT_PP)<<(4*SHUTDOWN_PIN);
     c40:	4398                	lw	a4,0(a5)
	int iled = 0;
     c42:	4401                	li	s0,0
		if ((SysTick->CNT - last_time) > Ticks_from_Ms(30000)) {
     c44:	50048493          	addi	s1,s1,1280 # aba9500 <tstcracha.c.b3ef1d14+0xaba6fc0>
	SHUTDOWN_PORT->CFGLR |= (GPIO_Speed_2MHz | GPIO_CNF_OUT_PP)<<(4*SHUTDOWN_PIN);
     c48:	00276713          	ori	a4,a4,2
     c4c:	c398                	sw	a4,0(a5)
	POWER_ON();
     c4e:	4705                	li	a4,1
     c50:	cb98                	sw	a4,16(a5)
	show_screen(scr);
     c52:	394d                	jal	904 <show_screen>
  uint32_t last_time = SysTick->CNT;	// para auto-shutdown
     c54:	e000f7b7          	lui	a5,0xe000f
     c58:	4790                	lw	a2,8(a5)
	int scr = 0;
     c5a:	c002                	sw	zero,0(sp)
		if ((SysTick->CNT - last_time) > Ticks_from_Ms(30000)) {
     c5c:	e000f737          	lui	a4,0xe000f
     c60:	4718                	lw	a4,8(a4)
     c62:	8f11                	sub	a4,a4,a2
     c64:	0ae4e963          	bltu	s1,a4,d16 <main+0x206>
			break;	// auto-shutdown
		}

		// Test switch pressed
		if (SW1_PRESSED()) {
     c68:	40011737          	lui	a4,0x40011
     c6c:	4718                	lw	a4,8(a4)
     c6e:	8b21                	andi	a4,a4,8
     c70:	e70d                	bnez	a4,c9a <main+0x18a>
			Delay_Ms(100);		// debounce
     c72:	00092537          	lui	a0,0x92
     c76:	7c050513          	addi	a0,a0,1984 # 927c0 <tstcracha.c.b3ef1d14+0x90280>
			while (SW1_PRESSED()) {
				Delay_Ms(10);
     c7a:	d3eff0ef          	jal	ra,1b8 <DelaySysTick>
			while (SW1_PRESSED()) {
     c7e:	40011737          	lui	a4,0x40011
     c82:	4718                	lw	a4,8(a4)
     c84:	8b21                	andi	a4,a4,8
     c86:	c321                	beqz	a4,cc6 <main+0x1b6>
			}
			// Move to next screen
			scr = (scr+1) % NSCREENS;
     c88:	4782                	lw	a5,0(sp)
     c8a:	0017c793          	xori	a5,a5,1
			show_screen(scr);
     c8e:	853e                	mv	a0,a5
			scr = (scr+1) % NSCREENS;
     c90:	c03e                	sw	a5,0(sp)
			show_screen(scr);
     c92:	398d                	jal	904 <show_screen>
			last_time = SysTick->CNT;
     c94:	e000f737          	lui	a4,0xe000f
     c98:	4710                	lw	a2,8(a4)
		}

		// Show activity in LEDs
		switch (iled) {
     c9a:	4689                	li	a3,2
     c9c:	06d40463          	beq	s0,a3,d04 <main+0x1f4>
     ca0:	0286c763          	blt	a3,s0,cce <main+0x1be>
     ca4:	cc1d                	beqz	s0,ce2 <main+0x1d2>
     ca6:	4705                	li	a4,1
     ca8:	04e40663          	beq	s0,a4,cf4 <main+0x1e4>
				break;
		}
		iled = (iled + 1) & 3;

		// Main loop delay
		Delay_Ms(100);
     cac:	00092537          	lui	a0,0x92
		iled = (iled + 1) & 3;
     cb0:	00140793          	addi	a5,s0,1
		Delay_Ms(100);
     cb4:	7c050513          	addi	a0,a0,1984 # 927c0 <tstcracha.c.b3ef1d14+0x90280>
     cb8:	c232                	sw	a2,4(sp)
		iled = (iled + 1) & 3;
     cba:	0037f413          	andi	s0,a5,3
		Delay_Ms(100);
     cbe:	cfaff0ef          	jal	ra,1b8 <DelaySysTick>
	while (TRUE) {
     cc2:	4612                	lw	a2,4(sp)
     cc4:	bf61                	j	c5c <main+0x14c>
				Delay_Ms(10);
     cc6:	653d                	lui	a0,0xf
     cc8:	a6050513          	addi	a0,a0,-1440 # ea60 <tstcracha.c.b3ef1d14+0xc520>
     ccc:	b77d                	j	c7a <main+0x16a>
		switch (iled) {
     cce:	470d                	li	a4,3
     cd0:	fce41ee3          	bne	s0,a4,cac <main+0x19c>
				LED3_OFF();
     cd4:	40011737          	lui	a4,0x40011
     cd8:	000405b7          	lui	a1,0x40
     cdc:	80b72823          	sw	a1,-2032(a4) # 40010810 <__global_pointer$+0x20010010>
     ce0:	a805                	j	d10 <main+0x200>
				LED4_OFF();
     ce2:	40011737          	lui	a4,0x40011
     ce6:	000205b7          	lui	a1,0x20
     cea:	80b72823          	sw	a1,-2032(a4) # 40010810 <__global_pointer$+0x20010010>
				LED1_ON();
     cee:	46c1                	li	a3,16
				LED2_ON();
     cf0:	cb14                	sw	a3,16(a4)
				break;
     cf2:	bf6d                	j	cac <main+0x19c>
				LED1_OFF();
     cf4:	001006b7          	lui	a3,0x100
     cf8:	40011737          	lui	a4,0x40011
     cfc:	cb14                	sw	a3,16(a4)
				LED2_ON();
     cfe:	08000693          	li	a3,128
     d02:	b7fd                	j	cf0 <main+0x1e0>
				LED2_OFF();
     d04:	008006b7          	lui	a3,0x800
     d08:	40011737          	lui	a4,0x40011
     d0c:	cb14                	sw	a3,16(a4)
				LED3_ON();
     d0e:	4691                	li	a3,4
				LED4_ON();
     d10:	80d72823          	sw	a3,-2032(a4) # 40010810 <__global_pointer$+0x20010010>
				break;
     d14:	bf61                	j	cac <main+0x19c>
	}

	// Stop
	LED4_ON();
     d16:	400117b7          	lui	a5,0x40011
     d1a:	4689                	li	a3,2
     d1c:	80d7a823          	sw	a3,-2032(a5) # 40010810 <__global_pointer$+0x20010010>
	POWER_OFF();
     d20:	6741                	lui	a4,0x10
     d22:	cb98                	sw	a4,16(a5)
	while(1)
     d24:	a001                	j	d24 <main+0x214>
     d26:	0000                	unimp
     d28:	31647373          	csrrci	t1,0x316,8
     d2c:	5f363033          	0x5f363033
     d30:	3269                	jal	6ba <mini_vpprintf+0x168>
     d32:	72655f63          	bge	a0,t1,1470 <fontdata+0x684>
     d36:	6f72                	flw	ft10,28(sp)
     d38:	2072                	fld	ft0,280(sp)
     d3a:	202d                	jal	d64 <main+0x254>
     d3c:	6974                	flw	fa3,84(a0)
     d3e:	656d                	lui	a0,0x1b
     d40:	2074756f          	jal	a0,48746 <tstcracha.c.b3ef1d14+0x46206>
     d44:	74696177          	0x74696177
     d48:	6e69                	lui	t3,0x1a
     d4a:	6f662067          	0x6f662067
     d4e:	2072                	fld	ft0,280(sp)
     d50:	7325                	lui	t1,0xfffe9
     d52:	0d0a                	slli	s10,s10,0x2
     d54:	0000                	unimp
     d56:	0000                	unimp
     d58:	5144                	lw	s1,36(a0)
     d5a:	54464f53          	0x54464f53
     d5e:	0000                	unimp
     d60:	6f79                	lui	t5,0x1e
     d62:	7475                	lui	s0,0xffffd
     d64:	6275                	lui	tp,0x1d
     d66:	2e65                	jal	111e <fontdata+0x332>
     d68:	2f6d6f63          	bltu	s10,s6,1066 <fontdata+0x27a>
     d6c:	0000                	unimp
     d6e:	0000                	unimp
     d70:	4440                	lw	s0,12(s0)
     d72:	5351                	li	t1,-12
     d74:	0074666f          	jal	a2,4757a <tstcracha.c.b3ef1d14+0x4503a>
     d78:	7164                	flw	fs1,100(a0)
     d7a:	74666f73          	csrrsi	t5,0x746,12
     d7e:	622e                	flw	ft4,200(sp)
     d80:	6f6c                	flw	fa1,92(a4)
     d82:	6f707367          	0x6f707367
     d86:	0074                	addi	a3,sp,12
     d88:	632e                	flw	ft6,200(sp)
     d8a:	00006d6f          	jal	s10,6d8a <tstcracha.c.b3ef1d14+0x484a>
     d8e:	0000                	unimp
     d90:	6f6e                	flw	ft10,216(sp)
     d92:	2074                	fld	fa3,192(s0)
     d94:	7562                	flw	fa0,56(sp)
     d96:	00007973          	csrrci	s2,ustatus,0
     d9a:	0000                	unimp
     d9c:	616d                	addi	sp,sp,240
     d9e:	72657473          	csrrci	s0,0x726,10
     da2:	6d20                	flw	fs0,88(a0)
     da4:	0065646f          	jal	s0,56daa <tstcracha.c.b3ef1d14+0x5486a>
     da8:	7274                	flw	fa3,100(a2)
     daa:	6e61                	lui	t3,0x18
     dac:	74696d73          	csrrsi	s10,0x746,18
     db0:	6d20                	flw	fs0,88(a0)
     db2:	0065646f          	jal	s0,56db8 <tstcracha.c.b3ef1d14+0x54878>
     db6:	0000                	unimp
     db8:	7874                	flw	fa3,116(s0)
     dba:	6520                	flw	fs0,72(a0)
     dbc:	706d                	c.lui	zero,0xffffb
     dbe:	7974                	flw	fa3,116(a0)
     dc0:	0000                	unimp
     dc2:	0000                	unimp
     dc4:	7274                	flw	fa3,100(a2)
     dc6:	6e61                	lui	t3,0x18
     dc8:	74696d73          	csrrsi	s10,0x746,18
     dcc:	6320                	flw	fs0,64(a4)
     dce:	6c706d6f          	jal	s10,7c94 <tstcracha.c.b3ef1d14+0x5754>
     dd2:	7465                	lui	s0,0xffff9
     dd4:	0065                	c.nop	25
	...

00000dd8 <errstr>:
     dd8:	0d90 0000 0d9c 0000 0da8 0000 0db8 0000     ................
     de8:	0dc4 0000                                   ....

00000dec <fontdata>:
	...
     df4:	817e 81a5 99bd 7e81 ff7e ffdb e7c3 7eff     ~......~~......~
     e04:	fe6c fefe 387c 0010 3810 fe7c 387c 0010     l...|8...8|.|8..
     e14:	7c38 fe38 d6fe 3810 3810 fe7c 7cfe 3810     8|8....8.8|..|.8
     e24:	0000 3c18 183c 0000 ffff c3e7 e7c3 ffff     ...<<...........
     e34:	3c00 4266 6642 003c c3ff bd99 99bd ffc3     .<fBBf<.........
     e44:	070f 7d0f cccc 78cc 663c 6666 183c 187e     ...}...x<fff<.~.
     e54:	333f 303f 7030 e0f0 637f 637f 6763 c0e6     ?3?00p...c.ccg..
     e64:	db18 e73c 3ce7 18db e080 fef8 e0f8 0080     ..<..<..........
     e74:	0e02 fe3e 0e3e 0002 3c18 187e 7e18 183c     ..>.>....<~..~<.
     e84:	6666 6666 0066 0066 db7f 7bdb 1b1b 001b     fffff.f....{....
     e94:	613e 663c 3c66 7c86 0000 0000 7e7e 007e     >a<ff<.|....~~~.
     ea4:	3c18 187e 3c7e ff18 3c18 187e 1818 0018     .<~.~<...<~.....
     eb4:	1818 1818 3c7e 0018 1800 fe0c 180c 0000     ....~<..........
     ec4:	3000 fe60 3060 0000 0000 c0c0 fec0 0000     .0`.`0..........
     ed4:	2400 ff66 2466 0000 1800 7e3c ffff 0000     .$f.f$....<~....
     ee4:	ff00 7eff 183c 0000 0000 0000 0000 0000     ...~<...........
     ef4:	3c18 183c 0018 0018 6666 0024 0000 0000     .<<.....ff$.....
     f04:	6c6c 6cfe 6cfe 006c 3e18 3c60 7c06 0018     ll.l.ll..>`<.|..
     f14:	c600 18cc 6630 00c6 6c38 7638 ccdc 0076     ....0f..8l8v..v.
     f24:	1818 0030 0000 0000 180c 3030 1830 000c     ..0.......000...
     f34:	1830 0c0c 180c 0030 6600 ff3c 663c 0000     0.....0..f<.<f..
     f44:	1800 7e18 1818 0000 0000 0000 1800 3018     ...~...........0
     f54:	0000 7e00 0000 0000 0000 0000 1800 0018     ...~............
     f64:	0c06 3018 c060 0080 6c38 d6c6 6cc6 0038     ...0`...8l...l8.
     f74:	3818 1818 1818 007e c67c 1c06 6630 00fe     .8....~.|...0f..
     f84:	c67c 3c06 c606 007c 3c1c cc6c 0cfe 001e     |..<..|..<l.....
     f94:	c0fe fcc0 c606 007c 6038 fcc0 c6c6 007c     ......|.8`....|.
     fa4:	c6fe 180c 3030 0030 c67c 7cc6 c6c6 007c     ....000.|..|..|.
     fb4:	c67c 7ec6 0c06 0078 1800 0018 1800 0018     |..~..x.........
     fc4:	1800 0018 1800 3018 0c06 3018 0c18 0006     .......0...0....
     fd4:	0000 007e 7e00 0000 3060 0c18 3018 0060     ..~..~..`0...0`.
     fe4:	c67c 180c 0018 0018 c67c dede c0de 0078     |.......|.....x.
     ff4:	6c38 fec6 c6c6 00c6 66fc 7c66 6666 00fc     8l.......ff|ff..
    1004:	663c c0c0 66c0 003c 6cf8 6666 6c66 00f8     <f...f<..lfffl..
    1014:	62fe 7868 6268 00fe 62fe 7868 6068 00f0     .bhxhb...bhxh`..
    1024:	663c c0c0 66ce 003a c6c6 fec6 c6c6 00c6     <f...f:.........
    1034:	183c 1818 1818 003c 0c1e 0c0c cccc 0078     <.....<.......x.
    1044:	66e6 786c 666c 00e6 60f0 6060 6662 00fe     .flxlf...```bf..
    1054:	eec6 fefe c6d6 00c6 e6c6 def6 c6ce 00c6     ................
    1064:	c67c c6c6 c6c6 007c 66fc 7c66 6060 00f0     |.....|..ff|``..
    1074:	c67c c6c6 cec6 0e7c 66fc 7c66 666c 00e6     |.....|..ff|lf..
    1084:	663c 1830 660c 003c 7e7e 185a 1818 003c     <f0..f<.~~Z...<.
    1094:	c6c6 c6c6 c6c6 007c c6c6 c6c6 6cc6 0038     ......|......l8.
    10a4:	c6c6 d6c6 fed6 006c c6c6 386c c66c 00c6     ......l...l8l...
    10b4:	6666 3c66 1818 003c c6fe 188c 6632 00fe     fff<..<.....2f..
    10c4:	303c 3030 3030 003c 60c0 1830 060c 0002     <00000<..`0.....
    10d4:	0c3c 0c0c 0c0c 003c 3810 c66c 0000 0000     <.....<..8l.....
    10e4:	0000 0000 0000 ff00 1830 000c 0000 0000     ........0.......
    10f4:	0000 0c78 cc7c 0076 60e0 667c 6666 00dc     ..x.|.v..`|fff..
    1104:	0000 c67c c6c0 007c 0c1c cc7c cccc 0076     ..|...|...|...v.
    1114:	0000 c67c c0fe 007c 663c f860 6060 00f0     ..|...|.<f`.``..
    1124:	0000 cc76 7ccc f80c 60e0 766c 6666 00e6     ..v..|...`lvff..
    1134:	0018 1838 1818 003c 0006 0606 6606 3c66     ..8...<......ff<
    1144:	60e0 6c66 6c78 00e6 1838 1818 1818 003c     .`flxl..8.....<.
    1154:	0000 feec d6d6 00d6 0000 66dc 6666 0066     ...........ffff.
    1164:	0000 c67c c6c6 007c 0000 66dc 7c66 f060     ..|...|....ff|`.
    1174:	0000 cc76 7ccc 1e0c 0000 76dc 6060 00f0     ..v..|.....v``..
    1184:	0000 c07e 067c 00fc 3030 30fc 3630 001c     ..~.|...00.006..
    1194:	0000 cccc cccc 0076 0000 c6c6 6cc6 0038     ......v......l8.
    11a4:	0000 d6c6 fed6 006c 0000 6cc6 6c38 00c6     ......l....l8l..
    11b4:	0000 c6c6 7ec6 fc06 0000 4c7e 3218 007e     .....~....~L.2~.
    11c4:	180e 7018 1818 000e 1818 1818 1818 0018     ...p............
    11d4:	1870 0e18 1818 0070 dc76 0000 0000 0000     p.....p.v.......
    11e4:	1000 6c38 c6c6 00fe c67c c0c0 7cc6 780c     ..8l....|....|.x
    11f4:	00cc cccc cccc 0076 180c c67c c0fe 007c     ......v...|...|.
    1204:	827c 0c78 cc7c 0076 00c6 0c78 cc7c 0076     |.x.|.v...x.|.v.
    1214:	1830 0c78 cc7c 0076 3030 0c78 cc7c 0076     0.x.|.v.00x.|.v.
    1224:	0000 c07e 7ec0 380c 827c c67c c0fe 007c     ..~..~.8|.|...|.
    1234:	00c6 c67c c0fe 007c 1830 c67c c0fe 007c     ..|...|.0.|...|.
    1244:	0066 1838 1818 003c 827c 1838 1818 003c     f.8...<.|.8...<.
    1254:	1830 3800 1818 003c 38c6 c66c c6fe 00c6     0..8..<..8l.....
    1264:	6c38 c67c c6fe 00c6 3018 c0fe c0f8 00fe     8l|......0......
    1274:	0000 187e d87e 007e 6c3e fecc cccc 00ce     ..~.~.~.>l......
    1284:	827c c67c c6c6 007c 00c6 c67c c6c6 007c     |.|...|...|...|.
    1294:	1830 c67c c6c6 007c 8478 cc00 cccc 0076     0.|...|.x.....v.
    12a4:	3060 cccc cccc 0076 00c6 c6c6 7ec6 fc06     `0....v......~..
    12b4:	38c6 c66c 6cc6 0038 00c6 c6c6 c6c6 007c     .8l..l8.......|.
    12c4:	1818 c07e 7ec0 1818 6c38 f064 6660 00fc     ..~..~..8ld.`f..
    12d4:	6666 7e3c 7e18 1818 ccf8 facc cfc6 c7c6     ff<~.~..........
    12e4:	1b0e 3c18 d818 0070 3018 0c78 cc7c 0076     ...<..p..0x.|.v.
    12f4:	180c 3800 1818 003c 180c c67c c6c6 007c     ...8..<...|...|.
    1304:	3018 cccc cccc 0076 dc76 dc00 6666 0066     .0....v.v...fff.
    1314:	dc76 e600 def6 00ce 6c3c 3e6c 7e00 0000     v.......<ll>.~..
    1324:	6c38 386c 7c00 0000 0018 1818 6330 003e     8ll8.|......0c>.
    1334:	0000 fe00 c0c0 0000 0000 fe00 0606 0000     ................
    1344:	e663 7e6c 6633 0fcc e663 7a6c 6a36 06df     c.l~3f..c.lz6j..
    1354:	0018 1818 3c3c 0018 3300 cc66 3366 0000     ....<<...3f.f3..
    1364:	cc00 3366 cc66 0000 8822 8822 8822 8822     ..f3f...".".".".
    1374:	aa55 aa55 aa55 aa55 dd77 dd77 dd77 dd77     U.U.U.U.w.w.w.w.
    1384:	1818 1818 1818 1818 1818 1818 18f8 1818     ................
    1394:	1818 18f8 18f8 1818 3636 3636 36f6 3636     ........6666.666
    13a4:	0000 0000 36fe 3636 0000 18f8 18f8 1818     .....666........
    13b4:	3636 06f6 36f6 3636 3636 3636 3636 3636     66...66666666666
    13c4:	0000 06fe 36f6 3636 3636 06f6 00fe 0000     .....66666......
    13d4:	3636 3636 00fe 0000 1818 18f8 00f8 0000     6666............
    13e4:	0000 0000 18f8 1818 1818 1818 001f 0000     ................
    13f4:	1818 1818 00ff 0000 0000 0000 18ff 1818     ................
    1404:	1818 1818 181f 1818 0000 0000 00ff 0000     ................
    1414:	1818 1818 18ff 1818 1818 181f 181f 1818     ................
    1424:	3636 3636 3637 3636 3636 3037 003f 0000     666676666670?...
    1434:	0000 303f 3637 3636 3636 00f7 00ff 0000     ..?0766666......
    1444:	0000 00ff 36f7 3636 3636 3037 3637 3636     .....66666707666
    1454:	0000 00ff 00ff 0000 3636 00f7 36f7 3636     ........66...666
    1464:	1818 00ff 00ff 0000 3636 3636 00ff 0000     ........6666....
    1474:	0000 00ff 18ff 1818 0000 0000 36ff 3636     .............666
    1484:	3636 3636 003f 0000 1818 181f 001f 0000     6666?...........
    1494:	0000 181f 181f 1818 0000 0000 363f 3636     ............?666
    14a4:	3636 3636 36ff 3636 1818 18ff 18ff 1818     6666.666........
    14b4:	1818 1818 00f8 0000 0000 0000 181f 1818     ................
    14c4:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................
    14d4:	f0f0 f0f0 f0f0 f0f0 0f0f 0f0f 0f0f 0f0f     ................
    14e4:	ffff ffff 0000 0000 0000 dc76 dcc8 0076     ..........v...v.
    14f4:	cc78 d8cc c6cc 00cc c6fe c0c0 c0c0 00c0     x...............
    1504:	0000 6cfe 6c6c 006c c6fe 3060 c660 00fe     ...llll...`0`...
    1514:	0000 d87e d8d8 0070 0000 6666 6666 c07c     ..~...p...ffff|.
    1524:	7600 18dc 1818 0018 187e 663c 3c66 7e18     .v......~.<ff<.~
    1534:	6c38 fec6 6cc6 0038 6c38 c6c6 6c6c 00ee     8l...l8.8l..ll..
    1544:	180e 3e0c 6666 003c 0000 db7e 7edb 0000     ...>ff<...~..~..
    1554:	0c06 db7e 7edb c060 301e 7e60 3060 001e     ..~..~`..0`~`0..
    1564:	7c00 c6c6 c6c6 00c6 fe00 fe00 fe00 0000     .|..............
    1574:	1818 187e 0018 007e 1830 180c 0030 007e     ..~...~.0...0.~.
    1584:	180c 1830 000c 007e 1b0e 181b 1818 1818     ..0...~.........
    1594:	1818 1818 d818 70d8 1800 7e00 1800 0000     .......p...~....
    15a4:	7600 00dc dc76 0000 6c38 386c 0000 0000     .v..v...8ll8....
    15b4:	0000 1800 0018 0000 0000 1800 0000 0000     ................
    15c4:	0c0f 0c0c 6cec 1c3c 366c 3636 0036 0000     .....l<.l6666...
    15d4:	0c78 3018 007c 0000 0000 3c3c 3c3c 0000     x..0|.....<<<<..
	...

000015ec <ssd1306_init_array>:
    15ec:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    15fc:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

00001608 <storm>:
	...
    161c:	fe7f 0000 0700 0180 00e0 0c00 0000 0020     .............. .
    162c:	1800 0000 0018 3000 0000 0004 2000 0000     .......0..... ..
    163c:	0004 2000 0000 0004 6000 0000 0002 4000     ... .....`.....@
    164c:	0000 0002 4000 0000 0001 4000 0000 0001     .....@.....@....
    165c:	4000 0000 0001 7f00 00e0 0001 7f00 ffff     .@..............
    166c:	00ff 7f00 ffff 00ff d700 ffff 00e1 bf01     ................
    167c:	1ffc 80fa bf01 cff1 80fa 3f01 37c2 80f7     ...........?.7..
    168c:	ef01 019c c0e7 e001 0670 8006 e001 03c0     ........p.......
    169c:	8006 ff01 0180 80ff f801 0000 c01d 7003     ...............p
    16ac:	8000 600c b005 f007 9008 1009 f81f d009     ...`............
    16bc:	900b 7c1f f003 c00f 0ffc 9007 430d 03c0     ...|.........C..
    16cc:	9007 6405 0000 10cf fc07 0000 1026 8001     ...d........&...
    16dc:	0000 2010 0001 0000 400e 8001 f007 8001     ... .....@......
    16ec:	8000 c807 8000 8000 e80b 8000 8700 e997     ................
    16fc:	80e0 8700 efdf 80a0 4b00 ffff 80a0 6b00     .........K.....k
    170c:	fbdf 00a3 2400 e897 0024 1e00 c01f 002c     .....$..$.....,.
    171c:	0700 1ff8 00f0 0000 f80f 0000               ............
